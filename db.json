{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ansible服务.md","hash":"a9cf4575edb4529af251853cea70bba4b11c489c","modified":1682205554294},{"_id":"source/_posts/apache2服务器.md","hash":"6883ac7731dbcf231d087351cfc29ce6df4abbe7","modified":1682205554294},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1682205554294},{"_id":"source/_posts/dns服务.md","hash":"78cfe4ff0ac5a25693f20c70e5ff3e292081ed7d","modified":1682205554294},{"_id":"source/_posts/tomcat服务.md","hash":"78b3d501f3769f0617b3ee733627f3b58d7a576e","modified":1682205554294},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1682205555154},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1682205555164},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1682205555164},{"_id":"public/posts/1003/index.html","hash":"988e0a46003949d513bd54d193489a9d7a6af78b","modified":1682260933408},{"_id":"public/posts/1001/index.html","hash":"b9ed490ec85cdfd133b39361a8f9403590202645","modified":1682260933408},{"_id":"public/archives/index.html","hash":"6babe99a1ecb958a5df2c76723d0d0cf76a9f071","modified":1682260933408},{"_id":"public/archives/2023/index.html","hash":"ddc5bbee9f9237c35022a27797e899a04f4b3d66","modified":1682260933408},{"_id":"public/archives/2023/04/index.html","hash":"85ec3b256202d4ed1793c17da7611e43efb494be","modified":1682260933408},{"_id":"public/posts/1002/index.html","hash":"51808cdcf7fe27ea4d9e3d342370f6dad3aae263","modified":1682260933408},{"_id":"public/posts/1004/index.html","hash":"b9c1690e0831e4fba984ec7fd7409489dbd3940c","modified":1682260933408},{"_id":"public/index.html","hash":"378f0f521ba4431e790e17404eed3f9ca366d7b3","modified":1682260933408},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1682260933408},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1682260933408},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1682260933408},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1682260933408},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1682260933408},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1682260933408},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1682260933408},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1682260933408},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1682260933408},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1682260933408},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1682260933408},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1682260933408}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ansible服务","date":"2023-04-21T15:55:04.000Z","_content":"\n\n\n安装Ansible和设置控制节点：\n\n1. 在linux1上安装Ansible，可以使用以下命令：\n\n   ```\n   sudo apt update\n   sudo apt install ansible\n   ```\n\n2. 配置Ansible的主机清单文件。在控制节点上使用vim编辑文件/etc/ansible/hosts，添加受控节点的IP地址或主机名。例如：\n\n   ```\n   [web_servers]\n   linux2 ansible_host=192.168.0.2\n   linux3 ansible_host=192.168.0.3\n   linux4 ansible_host=192.168.0.4\n\n   [database_servers]\n   linux5 ansible_host=192.168.0.5\n   linux6 ansible_host=192.168.0.6\n   linux7 ansible_host=192.168.0.7\n\n   [all:vars]\n   ansible_user=your_user_name\n   ansible_ssh_private_key_file=/path/to/your/private/key\n   ```\n\n   注意：将your_user_name和/path/to/your/private/key替换为实际的用户名和私钥路径。\n\n3. 验证Ansible是否可以与所有受控节点通信。可以使用以下命令：\n\n   ```\n   ansible all -m ping\n   ```\n\n   如果所有节点都响应pong，则表示成功。\n\n   注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。\n\n使用Ansible进行自动化运维：\n\n现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：\n\n1. 运行命令\n\n   ```\n   ansible all -a \"ls -l /var/log\"\n   ```\n\n   将在所有受控节点上运行命令“ls -l /var/log”。\n\n2. 复制文件\n\n   ```\n   ansible all -m copy -a \"src=/path/to/local/file dest=/path/to/remote/file\"\n   ```\n\n   将在所有受控节点上复制本地文件到远程目录。\n\n3. 安装软件包\n\n   ```\n   ansible all -m apt -a \"name=nginx state=present\"\n   ```\n\n   将在所有受控节点上安装Nginx软件包。\n\n以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。\n","source":"_posts/ansible服务.md","raw":"---\ntitle: ansible服务\ndate: 2023-04-21 23:55:04\ntags:\n---\n\n\n\n安装Ansible和设置控制节点：\n\n1. 在linux1上安装Ansible，可以使用以下命令：\n\n   ```\n   sudo apt update\n   sudo apt install ansible\n   ```\n\n2. 配置Ansible的主机清单文件。在控制节点上使用vim编辑文件/etc/ansible/hosts，添加受控节点的IP地址或主机名。例如：\n\n   ```\n   [web_servers]\n   linux2 ansible_host=192.168.0.2\n   linux3 ansible_host=192.168.0.3\n   linux4 ansible_host=192.168.0.4\n\n   [database_servers]\n   linux5 ansible_host=192.168.0.5\n   linux6 ansible_host=192.168.0.6\n   linux7 ansible_host=192.168.0.7\n\n   [all:vars]\n   ansible_user=your_user_name\n   ansible_ssh_private_key_file=/path/to/your/private/key\n   ```\n\n   注意：将your_user_name和/path/to/your/private/key替换为实际的用户名和私钥路径。\n\n3. 验证Ansible是否可以与所有受控节点通信。可以使用以下命令：\n\n   ```\n   ansible all -m ping\n   ```\n\n   如果所有节点都响应pong，则表示成功。\n\n   注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。\n\n使用Ansible进行自动化运维：\n\n现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：\n\n1. 运行命令\n\n   ```\n   ansible all -a \"ls -l /var/log\"\n   ```\n\n   将在所有受控节点上运行命令“ls -l /var/log”。\n\n2. 复制文件\n\n   ```\n   ansible all -m copy -a \"src=/path/to/local/file dest=/path/to/remote/file\"\n   ```\n\n   将在所有受控节点上复制本地文件到远程目录。\n\n3. 安装软件包\n\n   ```\n   ansible all -m apt -a \"name=nginx state=present\"\n   ```\n\n   将在所有受控节点上安装Nginx软件包。\n\n以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。\n","slug":"ansible服务","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtiq4qp00004os6fwhp0fgr","content":"<p>安装Ansible和设置控制节点：</p>\n<ol>\n<li><p>在linux1上安装Ansible，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install ansible</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Ansible的主机清单文件。在控制节点上使用vim编辑文件&#x2F;etc&#x2F;ansible&#x2F;hosts，添加受控节点的IP地址或主机名。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[web_servers]</span><br><span class=\"line\">linux2 ansible_host=192.168.0.2</span><br><span class=\"line\">linux3 ansible_host=192.168.0.3</span><br><span class=\"line\">linux4 ansible_host=192.168.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">[database_servers]</span><br><span class=\"line\">linux5 ansible_host=192.168.0.5</span><br><span class=\"line\">linux6 ansible_host=192.168.0.6</span><br><span class=\"line\">linux7 ansible_host=192.168.0.7</span><br><span class=\"line\"></span><br><span class=\"line\">[all:vars]</span><br><span class=\"line\">ansible_user=your_user_name</span><br><span class=\"line\">ansible_ssh_private_key_file=/path/to/your/private/key</span><br></pre></td></tr></table></figure>\n\n<p>注意：将your_user_name和&#x2F;path&#x2F;to&#x2F;your&#x2F;private&#x2F;key替换为实际的用户名和私钥路径。</p>\n</li>\n<li><p>验证Ansible是否可以与所有受控节点通信。可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping</span><br></pre></td></tr></table></figure>\n\n<p>如果所有节点都响应pong，则表示成功。</p>\n<p>注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。</p>\n</li>\n</ol>\n<p>使用Ansible进行自动化运维：</p>\n<p>现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：</p>\n<ol>\n<li><p>运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -a &quot;ls -l /var/log&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上运行命令“ls -l &#x2F;var&#x2F;log”。</p>\n</li>\n<li><p>复制文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/path/to/local/file dest=/path/to/remote/file&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上复制本地文件到远程目录。</p>\n</li>\n<li><p>安装软件包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m apt -a &quot;name=nginx state=present&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上安装Nginx软件包。</p>\n</li>\n</ol>\n<p>以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。</p>\n","site":{"data":{}},"abbrlink":1001,"excerpt":"","more":"<p>安装Ansible和设置控制节点：</p>\n<ol>\n<li><p>在linux1上安装Ansible，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install ansible</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Ansible的主机清单文件。在控制节点上使用vim编辑文件&#x2F;etc&#x2F;ansible&#x2F;hosts，添加受控节点的IP地址或主机名。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[web_servers]</span><br><span class=\"line\">linux2 ansible_host=192.168.0.2</span><br><span class=\"line\">linux3 ansible_host=192.168.0.3</span><br><span class=\"line\">linux4 ansible_host=192.168.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">[database_servers]</span><br><span class=\"line\">linux5 ansible_host=192.168.0.5</span><br><span class=\"line\">linux6 ansible_host=192.168.0.6</span><br><span class=\"line\">linux7 ansible_host=192.168.0.7</span><br><span class=\"line\"></span><br><span class=\"line\">[all:vars]</span><br><span class=\"line\">ansible_user=your_user_name</span><br><span class=\"line\">ansible_ssh_private_key_file=/path/to/your/private/key</span><br></pre></td></tr></table></figure>\n\n<p>注意：将your_user_name和&#x2F;path&#x2F;to&#x2F;your&#x2F;private&#x2F;key替换为实际的用户名和私钥路径。</p>\n</li>\n<li><p>验证Ansible是否可以与所有受控节点通信。可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping</span><br></pre></td></tr></table></figure>\n\n<p>如果所有节点都响应pong，则表示成功。</p>\n<p>注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。</p>\n</li>\n</ol>\n<p>使用Ansible进行自动化运维：</p>\n<p>现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：</p>\n<ol>\n<li><p>运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -a &quot;ls -l /var/log&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上运行命令“ls -l &#x2F;var&#x2F;log”。</p>\n</li>\n<li><p>复制文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/path/to/local/file dest=/path/to/remote/file&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上复制本地文件到远程目录。</p>\n</li>\n<li><p>安装软件包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m apt -a &quot;name=nginx state=present&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上安装Nginx软件包。</p>\n</li>\n</ol>\n<p>以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。</p>\n"},{"title":"apache2服务器","date":"2023-04-21T16:15:52.000Z","_content":"\ntitle: 安装Apache2服务器\nauthor: John Doe\ndate: 2022-01-11 21:06:21\ntags:\n---\nWelcome to [Avrilzion blog](https://avrilzion.github.io/ifyblog)! This is your very first post.\n\n1. 安装Apache2服务器\n\n使用以下命令在Linux1上安装Apache2服务器：\n\n```\nsudo apt update\nsudo apt install apache2\n```\n\n2. 配置Apache2服务器\n\n打开Apache2的配置文件`/etc/apache2/sites-available/000-default.conf`，在`<VirtualHost *:80>`标签内添加以下内容：\n\n```\nServerName www.skills.lan\nServerAlias any.skills.lan\nRedirectMatch ^/(.*)$ https://www.skills.lan/$1\n```\n\n该配置将任何使用`skills.lan`或`any.skills.lan`访问的请求自动重定向到`www.skills.lan`。\n\n接着，打开Apache2的默认配置文件`/etc/apache2/sites-available/default-ssl.conf`，修改以下内容：\n\n```\nSSLCertificateFile /etc/ssl/apache.crt\nSSLCertificateKeyFile /etc/ssl/apache.key\n```\n\n并添加以下内容：\n\n```\nSSLEngine on\nSSLVerifyClient require\nSSLVerifyDepth 10\nSSLCACertificateFile /etc/ssl/ca.crt\n```\n\n这将启用SSL，要求客户端提供证书，并使用`/etc/ssl/ca.crt`中的证书作为可信CA证书。\n\n最后，将`/var/www/html/index.html`文件替换为以下内容：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>apache</title>\n</head>\n<body>\n\t<h1>Welcome to Apache!</h1>\n</body>\n</html>\n```\n\n3. 生成证书文件\n\n使用以下命令将`/etc/ssl/skills.crt`和`/etc/ssl/skills.key`转换为`/etc/ssl/skills.pfx`：\n\n```\nopenssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt\n```\n\n接着，使用以下命令将`/etc/ssl/skills.pfx`转换为`/etc/ssl/skills.pem`：\n\n```\nopenssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes\n```\n\n最后，使用以下命令从`/etc/ssl/skills.pem`提取证书和私钥，并分别保存到`/etc/ssl/apache.crt`和`/etc/ssl/apache.key`：\n\n```\nopenssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt\nopenssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key\n```\n\n4. 重启Apache2服务\n\n使用以下命令重启Apache2服务：\n\n```\nsudo service apache2 restart\n```\n\n现在，当使用`skills.lan`或`any.skills.lan`访问Linux1时，请求将自动重定向到`www.skills.lan`，且要求客户端提供SSL证书。\n","source":"_posts/apache2服务器.md","raw":"---\ntitle: apache2服务器\ndate: 2023-04-22 00:15:52\ntags:\n---\n\ntitle: 安装Apache2服务器\nauthor: John Doe\ndate: 2022-01-11 21:06:21\ntags:\n---\nWelcome to [Avrilzion blog](https://avrilzion.github.io/ifyblog)! This is your very first post.\n\n1. 安装Apache2服务器\n\n使用以下命令在Linux1上安装Apache2服务器：\n\n```\nsudo apt update\nsudo apt install apache2\n```\n\n2. 配置Apache2服务器\n\n打开Apache2的配置文件`/etc/apache2/sites-available/000-default.conf`，在`<VirtualHost *:80>`标签内添加以下内容：\n\n```\nServerName www.skills.lan\nServerAlias any.skills.lan\nRedirectMatch ^/(.*)$ https://www.skills.lan/$1\n```\n\n该配置将任何使用`skills.lan`或`any.skills.lan`访问的请求自动重定向到`www.skills.lan`。\n\n接着，打开Apache2的默认配置文件`/etc/apache2/sites-available/default-ssl.conf`，修改以下内容：\n\n```\nSSLCertificateFile /etc/ssl/apache.crt\nSSLCertificateKeyFile /etc/ssl/apache.key\n```\n\n并添加以下内容：\n\n```\nSSLEngine on\nSSLVerifyClient require\nSSLVerifyDepth 10\nSSLCACertificateFile /etc/ssl/ca.crt\n```\n\n这将启用SSL，要求客户端提供证书，并使用`/etc/ssl/ca.crt`中的证书作为可信CA证书。\n\n最后，将`/var/www/html/index.html`文件替换为以下内容：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>apache</title>\n</head>\n<body>\n\t<h1>Welcome to Apache!</h1>\n</body>\n</html>\n```\n\n3. 生成证书文件\n\n使用以下命令将`/etc/ssl/skills.crt`和`/etc/ssl/skills.key`转换为`/etc/ssl/skills.pfx`：\n\n```\nopenssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt\n```\n\n接着，使用以下命令将`/etc/ssl/skills.pfx`转换为`/etc/ssl/skills.pem`：\n\n```\nopenssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes\n```\n\n最后，使用以下命令从`/etc/ssl/skills.pem`提取证书和私钥，并分别保存到`/etc/ssl/apache.crt`和`/etc/ssl/apache.key`：\n\n```\nopenssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt\nopenssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key\n```\n\n4. 重启Apache2服务\n\n使用以下命令重启Apache2服务：\n\n```\nsudo service apache2 restart\n```\n\n现在，当使用`skills.lan`或`any.skills.lan`访问Linux1时，请求将自动重定向到`www.skills.lan`，且要求客户端提供SSL证书。\n","slug":"apache2服务器","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtiq4rp00014os6494vbcs8","content":"<h2 id=\"title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\"><a href=\"#title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\" class=\"headerlink\" title=\"title: 安装Apache2服务器author: John Doedate: 2022-01-11 21:06:21tags:\"></a>title: 安装Apache2服务器<br>author: John Doe<br>date: 2022-01-11 21:06:21<br>tags:</h2><p>Welcome to <a href=\"https://avrilzion.github.io/ifyblog\">Avrilzion blog</a>! This is your very first post.</p>\n<ol>\n<li>安装Apache2服务器</li>\n</ol>\n<p>使用以下命令在Linux1上安装Apache2服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置Apache2服务器</li>\n</ol>\n<p>打开Apache2的配置文件<code>/etc/apache2/sites-available/000-default.conf</code>，在<code>&lt;VirtualHost *:80&gt;</code>标签内添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName www.skills.lan</span><br><span class=\"line\">ServerAlias any.skills.lan</span><br><span class=\"line\">RedirectMatch ^/(.*)$ https://www.skills.lan/$1</span><br></pre></td></tr></table></figure>\n\n<p>该配置将任何使用<code>skills.lan</code>或<code>any.skills.lan</code>访问的请求自动重定向到<code>www.skills.lan</code>。</p>\n<p>接着，打开Apache2的默认配置文件<code>/etc/apache2/sites-available/default-ssl.conf</code>，修改以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/apache.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<p>并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLVerifyClient require</span><br><span class=\"line\">SSLVerifyDepth 10</span><br><span class=\"line\">SSLCACertificateFile /etc/ssl/ca.crt</span><br></pre></td></tr></table></figure>\n\n<p>这将启用SSL，要求客户端提供证书，并使用<code>/etc/ssl/ca.crt</code>中的证书作为可信CA证书。</p>\n<p>最后，将<code>/var/www/html/index.html</code>文件替换为以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;apache&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;Welcome to Apache!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成证书文件</li>\n</ol>\n<p>使用以下命令将<code>/etc/ssl/skills.crt</code>和<code>/etc/ssl/skills.key</code>转换为<code>/etc/ssl/skills.pfx</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt</span><br></pre></td></tr></table></figure>\n\n<p>接着，使用以下命令将<code>/etc/ssl/skills.pfx</code>转换为<code>/etc/ssl/skills.pem</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes</span><br></pre></td></tr></table></figure>\n\n<p>最后，使用以下命令从<code>/etc/ssl/skills.pem</code>提取证书和私钥，并分别保存到<code>/etc/ssl/apache.crt</code>和<code>/etc/ssl/apache.key</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt</span><br><span class=\"line\">openssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启Apache2服务</li>\n</ol>\n<p>使用以下命令重启Apache2服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当使用<code>skills.lan</code>或<code>any.skills.lan</code>访问Linux1时，请求将自动重定向到<code>www.skills.lan</code>，且要求客户端提供SSL证书。</p>\n","site":{"data":{}},"abbrlink":1002,"excerpt":"","more":"<h2 id=\"title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\"><a href=\"#title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\" class=\"headerlink\" title=\"title: 安装Apache2服务器author: John Doedate: 2022-01-11 21:06:21tags:\"></a>title: 安装Apache2服务器<br>author: John Doe<br>date: 2022-01-11 21:06:21<br>tags:</h2><p>Welcome to <a href=\"https://avrilzion.github.io/ifyblog\">Avrilzion blog</a>! This is your very first post.</p>\n<ol>\n<li>安装Apache2服务器</li>\n</ol>\n<p>使用以下命令在Linux1上安装Apache2服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置Apache2服务器</li>\n</ol>\n<p>打开Apache2的配置文件<code>/etc/apache2/sites-available/000-default.conf</code>，在<code>&lt;VirtualHost *:80&gt;</code>标签内添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName www.skills.lan</span><br><span class=\"line\">ServerAlias any.skills.lan</span><br><span class=\"line\">RedirectMatch ^/(.*)$ https://www.skills.lan/$1</span><br></pre></td></tr></table></figure>\n\n<p>该配置将任何使用<code>skills.lan</code>或<code>any.skills.lan</code>访问的请求自动重定向到<code>www.skills.lan</code>。</p>\n<p>接着，打开Apache2的默认配置文件<code>/etc/apache2/sites-available/default-ssl.conf</code>，修改以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/apache.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<p>并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLVerifyClient require</span><br><span class=\"line\">SSLVerifyDepth 10</span><br><span class=\"line\">SSLCACertificateFile /etc/ssl/ca.crt</span><br></pre></td></tr></table></figure>\n\n<p>这将启用SSL，要求客户端提供证书，并使用<code>/etc/ssl/ca.crt</code>中的证书作为可信CA证书。</p>\n<p>最后，将<code>/var/www/html/index.html</code>文件替换为以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;apache&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;Welcome to Apache!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成证书文件</li>\n</ol>\n<p>使用以下命令将<code>/etc/ssl/skills.crt</code>和<code>/etc/ssl/skills.key</code>转换为<code>/etc/ssl/skills.pfx</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt</span><br></pre></td></tr></table></figure>\n\n<p>接着，使用以下命令将<code>/etc/ssl/skills.pfx</code>转换为<code>/etc/ssl/skills.pem</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes</span><br></pre></td></tr></table></figure>\n\n<p>最后，使用以下命令从<code>/etc/ssl/skills.pem</code>提取证书和私钥，并分别保存到<code>/etc/ssl/apache.crt</code>和<code>/etc/ssl/apache.key</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt</span><br><span class=\"line\">openssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启Apache2服务</li>\n</ol>\n<p>使用以下命令重启Apache2服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当使用<code>skills.lan</code>或<code>any.skills.lan</code>访问Linux1时，请求将自动重定向到<code>www.skills.lan</code>，且要求客户端提供SSL证书。</p>\n"},{"title":"dns服务","date":"2023-04-21T15:32:43.000Z","_content":"\n\n\n### 2. DNS服务\n\n#### 2.1 防火墙设置\n\n在Ubuntu下，可以使用 `ufw` 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。\n\n```\nsudo ufw enable\nsudo ufw default deny incoming\n```\n\n然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：\n\n```\nsudo ufw allow 53/tcp\nsudo ufw allow 53/udp\n```\n\n#### 2.2 NTP服务设置\n\n使用 `chrony` 工具来配置NTP服务。首先，在linux1上安装 `chrony`：\n\n```\nsudo apt-get install chrony\n```\n\n然后，在 `/etc/chrony/chrony.conf` 文件中添加以下内容：\n\n```\nallow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务\n```\n\n最后，启动 `chrony` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start chrony\nsudo systemctl enable chrony\n```\n\n#### 2.3 SSH认证设置\n\n为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：\n\n```\nssh-keygen -t rsa\n```\n\n然后，在每个主机上将公钥添加到授权文件中：\n\n```\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n接下来，我们需要修改SSH配置文件 `/etc/ssh/sshd_config` ，禁用密码认证。找到以下两个配置项，并将其值改为 `no`：\n\n```\nPasswordAuthentication no\nChallengeResponseAuthentication no\n```\n\n最后，重启 SSH 服务：\n\n```\nsudo systemctl restart sshd\n```\n\n#### 2.4 DNS设置\n\n首先，在linux1上安装 `bind`：\n\n```\nsudo apt-get install bind9\n```\n\n然后，在 `/etc/bind/named.conf.options` 文件中配置 DNS 服务器：\n\n```\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8; # Google DNS\n        8.8.4.4;\n    };\n};\n\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"0.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192\";\n    allow-update { none; };\n};\n```\n\n这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：`skills.lan` 和 `0.168.192.in-addr.arpa`（这是内部网络的反向解析区域）。这些区域的信息将存储在 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192` 文件中。\n\n现在，我们需要创建这些区域文件。\n首先，创建`/etc/bind/db.skills.lan` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN A    192.168.0.1\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了 `skills.lan` 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。\n\n然后，创建 `/etc/bind/db.192` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN PTR  skills.lan.\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。\n\n最后，启动 `bind` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start bind9\nsudo systemctl enable bind9\n```\n\n然后，在linux2上也安装 `bind`，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 `/etc/bind/named.conf.options` 中的 `forwarders` 改为：\n\n```\nforwarders {\n    192.168.0.1; # 主DNS服务器\n};\n```\n\n#### 2.5 CA证书设置\n\n首先，在linux1上安装 `easy-rsa` 工具：\n\n```\nsudo apt-get install easy-rsa\n```\n\n然后，使用 `easy-rsa` 工具初始化 CA（证书颁发机构）：\n\n```\ncd /usr/share/easy-rsa\nsudo ./easyrsa init-pki\n```\n\n接下来，生成 CA 证书和私钥：\n\n```\nsudo ./easyrsa build-ca\n```\n\n在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。\n\n然后，创建服务器证书签名请求（CSR）：\n\n```\nsudo ./easyrsa gen-req server nopass\n```\n\n这个命令将生成一个名为 `server.req` 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 `skills.lan`。\n\n接下来，使用 CA签名服务器证书：\n\n```\nsudo ./easyrsa sign-req server server\n```\n\n这个命令将使用 CA 的私钥对 `server.req` 文件进行签名，生成一个名为 `server.crt` 的服务器证书文件。\n\n然后，将证书和私钥文件复制到 `/etc/ssl` 目录：\n\n```\nsudo cp pki/issued/server.crt /etc/ssl/certs/\nsudo cp pki/private/server.key /etc/ssl/private/\n```\n\n接下来，在 Apache2 中启用 SSL 模块：\n\n```\nsudo a2enmod ssl\n```\n\n然后，编辑 `/etc/apache2/sites-available/default-ssl.conf` 文件，配置 SSL 证书和私钥文件的路径：\n\n```\nSSLCertificateFile /etc/ssl/certs/server.crt\nSSLCertificateKeyFile /etc/ssl/private/server.key\n```\n\n然后，启用 SSL 站点：\n\n```\nsudo a2ensite default-ssl.conf\n```\n\n最后，重启 Apache2 服务：\n\n```\nsudo systemctl restart apache2\n```\n\n现在，访问 `https://linux1.skills.lan` 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 `/etc/ssl` 目录即可。\n\n(4) 配置 DNS 服务器\n\n接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。\n\n首先，在 `linux1` 上安装 BIND9：\n\n```\nsudo apt-get update\nsudo apt-get install bind9 bind9utils bind9-doc\n```\n\n然后，编辑 BIND9 配置文件 `/etc/bind/named.conf.local`，添加以下内容：\n\n```\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"1.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192.168.1\";\n    allow-update { none; };\n};\n```\n\n这段配置文件指定了 BIND9 的两个 DNS 区域：`skills.lan` 和 `1.168.192.in-addr.arpa`。`skills.lan` 区域用于域名解析，`1.168.192.in-addr.arpa` 区域用于 IP 地址反向解析。\n\n然后，创建两个区域文件 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192.168.1`：\n\n- `/etc/bind/db.skills.lan` 文件内容：\n\n```\n;\n; BIND data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n@       IN      A       192.168.1.101\nlinux1  IN      A       192.168.1.101\nlinux2  IN      A       192.168.1.102\n```\n\n- `/etc/bind/db.192.168.1` 文件内容：\n\n```\n;\n; BIND reverse data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n101     IN      PTR     linux1.skills.lan.\n102     IN      PTR     linux2.skills.lan.\n```\n\n这两个文件分别定义了 `skills.lan` 区域和 `1.168.192.in-addr.arpa` 区域的记录。\n\n最后，重启 BIND9 服务：\n\n```\nsudo systemctl restart bind9\n```\n\n现在，所有 Linux 主机都可以通过 `linux1` 和 `linux2` 进行 DNS 解析和反向解析了。如果 `linux1` 挂了，`linux2` 会自动接管 DNS 服务。\n\n(5) 配置 CA 服务器和证书\n\n最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。\n\n首先，在 `linux1` 上安装 OpenSSL：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\n```\n\n然后，生成 CA 证书和私钥：\n\n```\ncd /etc/ssl\nsudo mkdir CA\ncd CA\nsudo mkdir certs crl newcerts private\nsudo chmod 700 private\nsudo touch index.txt\necho 1000 > serial\nsudo openssl genrsa -aes256 -out private/ca.key.pem 4096\nsudo chmod 400 private/ca.key.pem\nsudo openssl req -config /etc/ssl/openssl.cnf \\\n    -key private/ca.key.pem \\\n    -new -x509 -days 3650 -sha256 -extensions v3_ca \\\n    -out certs/ca.cert.pem\nsudo chmod 444 certs/ca.cert.pem\n```\n\n这段命令生成了一个名为 `ca.key.pem` 的私钥和一个名为 `ca.cert.pem` 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。\n\n```\nsudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/\nsudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/\n```\n\n这里的 `user` 是你在 `linux2` 主机上的用户名。\n\n然后，在 `linux2` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建证书签名请求。\n\n接下来，在 `linux2` 上生成一个证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的证书。\n\n最后，将 `skills.cert.pem` 和 `skills.key` 文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录：\n\n```\nsudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/\nsudo scp user@linux1:/tmp/skills.key /etc/ssl/\nsudo chmod 644 /etc/ssl/skills.cert.pem\nsudo chmod 400 /etc/ssl/skills.key\n```\n\n现在，`linux1` 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。\n\n首先，在 `linux1` 上安装 Apache2：\n\n```\nsudo apt-get update\nsudo apt-get install apache2\n```\n\n然后，在 `linux1` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建服务器证书签名请求。\n\n接下来，在 `linux1` 上生成一个服务器证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的服务器证书。\n\n接下来，为 Apache2 配置 SSL：\n\n```\nsudo a2enmod ssl\nsudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf\nsudo vi /etc/apache2/sites-available/skills-ssl.conf\n```\n\n这个命令将复制默认的 SSL 配置文件，并将其重命名为 `skills-ssl.conf`。然后使用 vi 编辑器打开 `skills-ssl.conf` 文件，将以下内容添加到文件的末尾：\n\n```\nSSLEngine on\nSSLCertificateFile /etc/ssl/skills.cert.pem\nSSLCertificateKeyFile /etc/ssl/skills.key\n```\n\n保存并关闭文件。\n\n接下来，启用 `skills-ssl.conf` 配置文件：\n\n```\nsudo a2ensite skills-ssl.conf\n```\n\n然后重新启动 Apache2：\n\n```\nsudo service apache2 restart\n```\n\n现在，当用户访问 `https://skills.lan` 时，Apache2 将使用 `skills.cert.pem` 和 `skills.key` 文件提供 HTTPS 服务。并且，因为我们已经在 `linux1` 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。\n\n最后，让我们在其他 Linux 主机上测试 HTTPS 站点。\n\n首先，让我们在 `linux2` 上测试 HTTPS 站点：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux1:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux1` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 HTTPS 站点已成功配置。\n\n接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 `192.168.1.100`，请使用浏览器访问 `https://skills.lan`。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：\n\n![Firefox security warning](https://i.imgur.com/3Edd6wh.png)\n\n这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 \"Advanced...\"，然后单击 \"Accept the Risk and Continue\"，即可访问 HTTPS 站点。\n\n如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。\n\n至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n\n最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录。我们已经为 `linux1` 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 `linux2` 上。\n\n假设您已经在 `linux1` 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 `linux2` 上：\n\n```\nsudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/\n```\n\n这个命令将 `linux1` 上的 `/etc/ssl/skills.crt` 和 `/etc/ssl/skills.key` 文件复制到 `linux2` 上的 `/etc/ssl/` 目录中。\n\n现在，我们已经在 `linux2` 上复制了证书和私钥文件，让我们使用以下命令验证 `linux2` 上的 HTTPS 服务器是否工作正常：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux2:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux2` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 `linux2` 上的 HTTPS 站点已成功配置。\n\n至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n","source":"_posts/dns服务.md","raw":"---\ntitle: dns服务\ndate: 2023-04-21 23:32:43\ntags:\n---\n\n\n\n### 2. DNS服务\n\n#### 2.1 防火墙设置\n\n在Ubuntu下，可以使用 `ufw` 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。\n\n```\nsudo ufw enable\nsudo ufw default deny incoming\n```\n\n然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：\n\n```\nsudo ufw allow 53/tcp\nsudo ufw allow 53/udp\n```\n\n#### 2.2 NTP服务设置\n\n使用 `chrony` 工具来配置NTP服务。首先，在linux1上安装 `chrony`：\n\n```\nsudo apt-get install chrony\n```\n\n然后，在 `/etc/chrony/chrony.conf` 文件中添加以下内容：\n\n```\nallow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务\n```\n\n最后，启动 `chrony` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start chrony\nsudo systemctl enable chrony\n```\n\n#### 2.3 SSH认证设置\n\n为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：\n\n```\nssh-keygen -t rsa\n```\n\n然后，在每个主机上将公钥添加到授权文件中：\n\n```\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n接下来，我们需要修改SSH配置文件 `/etc/ssh/sshd_config` ，禁用密码认证。找到以下两个配置项，并将其值改为 `no`：\n\n```\nPasswordAuthentication no\nChallengeResponseAuthentication no\n```\n\n最后，重启 SSH 服务：\n\n```\nsudo systemctl restart sshd\n```\n\n#### 2.4 DNS设置\n\n首先，在linux1上安装 `bind`：\n\n```\nsudo apt-get install bind9\n```\n\n然后，在 `/etc/bind/named.conf.options` 文件中配置 DNS 服务器：\n\n```\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8; # Google DNS\n        8.8.4.4;\n    };\n};\n\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"0.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192\";\n    allow-update { none; };\n};\n```\n\n这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：`skills.lan` 和 `0.168.192.in-addr.arpa`（这是内部网络的反向解析区域）。这些区域的信息将存储在 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192` 文件中。\n\n现在，我们需要创建这些区域文件。\n首先，创建`/etc/bind/db.skills.lan` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN A    192.168.0.1\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了 `skills.lan` 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。\n\n然后，创建 `/etc/bind/db.192` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN PTR  skills.lan.\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。\n\n最后，启动 `bind` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start bind9\nsudo systemctl enable bind9\n```\n\n然后，在linux2上也安装 `bind`，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 `/etc/bind/named.conf.options` 中的 `forwarders` 改为：\n\n```\nforwarders {\n    192.168.0.1; # 主DNS服务器\n};\n```\n\n#### 2.5 CA证书设置\n\n首先，在linux1上安装 `easy-rsa` 工具：\n\n```\nsudo apt-get install easy-rsa\n```\n\n然后，使用 `easy-rsa` 工具初始化 CA（证书颁发机构）：\n\n```\ncd /usr/share/easy-rsa\nsudo ./easyrsa init-pki\n```\n\n接下来，生成 CA 证书和私钥：\n\n```\nsudo ./easyrsa build-ca\n```\n\n在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。\n\n然后，创建服务器证书签名请求（CSR）：\n\n```\nsudo ./easyrsa gen-req server nopass\n```\n\n这个命令将生成一个名为 `server.req` 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 `skills.lan`。\n\n接下来，使用 CA签名服务器证书：\n\n```\nsudo ./easyrsa sign-req server server\n```\n\n这个命令将使用 CA 的私钥对 `server.req` 文件进行签名，生成一个名为 `server.crt` 的服务器证书文件。\n\n然后，将证书和私钥文件复制到 `/etc/ssl` 目录：\n\n```\nsudo cp pki/issued/server.crt /etc/ssl/certs/\nsudo cp pki/private/server.key /etc/ssl/private/\n```\n\n接下来，在 Apache2 中启用 SSL 模块：\n\n```\nsudo a2enmod ssl\n```\n\n然后，编辑 `/etc/apache2/sites-available/default-ssl.conf` 文件，配置 SSL 证书和私钥文件的路径：\n\n```\nSSLCertificateFile /etc/ssl/certs/server.crt\nSSLCertificateKeyFile /etc/ssl/private/server.key\n```\n\n然后，启用 SSL 站点：\n\n```\nsudo a2ensite default-ssl.conf\n```\n\n最后，重启 Apache2 服务：\n\n```\nsudo systemctl restart apache2\n```\n\n现在，访问 `https://linux1.skills.lan` 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 `/etc/ssl` 目录即可。\n\n(4) 配置 DNS 服务器\n\n接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。\n\n首先，在 `linux1` 上安装 BIND9：\n\n```\nsudo apt-get update\nsudo apt-get install bind9 bind9utils bind9-doc\n```\n\n然后，编辑 BIND9 配置文件 `/etc/bind/named.conf.local`，添加以下内容：\n\n```\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"1.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192.168.1\";\n    allow-update { none; };\n};\n```\n\n这段配置文件指定了 BIND9 的两个 DNS 区域：`skills.lan` 和 `1.168.192.in-addr.arpa`。`skills.lan` 区域用于域名解析，`1.168.192.in-addr.arpa` 区域用于 IP 地址反向解析。\n\n然后，创建两个区域文件 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192.168.1`：\n\n- `/etc/bind/db.skills.lan` 文件内容：\n\n```\n;\n; BIND data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n@       IN      A       192.168.1.101\nlinux1  IN      A       192.168.1.101\nlinux2  IN      A       192.168.1.102\n```\n\n- `/etc/bind/db.192.168.1` 文件内容：\n\n```\n;\n; BIND reverse data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n101     IN      PTR     linux1.skills.lan.\n102     IN      PTR     linux2.skills.lan.\n```\n\n这两个文件分别定义了 `skills.lan` 区域和 `1.168.192.in-addr.arpa` 区域的记录。\n\n最后，重启 BIND9 服务：\n\n```\nsudo systemctl restart bind9\n```\n\n现在，所有 Linux 主机都可以通过 `linux1` 和 `linux2` 进行 DNS 解析和反向解析了。如果 `linux1` 挂了，`linux2` 会自动接管 DNS 服务。\n\n(5) 配置 CA 服务器和证书\n\n最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。\n\n首先，在 `linux1` 上安装 OpenSSL：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\n```\n\n然后，生成 CA 证书和私钥：\n\n```\ncd /etc/ssl\nsudo mkdir CA\ncd CA\nsudo mkdir certs crl newcerts private\nsudo chmod 700 private\nsudo touch index.txt\necho 1000 > serial\nsudo openssl genrsa -aes256 -out private/ca.key.pem 4096\nsudo chmod 400 private/ca.key.pem\nsudo openssl req -config /etc/ssl/openssl.cnf \\\n    -key private/ca.key.pem \\\n    -new -x509 -days 3650 -sha256 -extensions v3_ca \\\n    -out certs/ca.cert.pem\nsudo chmod 444 certs/ca.cert.pem\n```\n\n这段命令生成了一个名为 `ca.key.pem` 的私钥和一个名为 `ca.cert.pem` 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。\n\n```\nsudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/\nsudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/\n```\n\n这里的 `user` 是你在 `linux2` 主机上的用户名。\n\n然后，在 `linux2` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建证书签名请求。\n\n接下来，在 `linux2` 上生成一个证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的证书。\n\n最后，将 `skills.cert.pem` 和 `skills.key` 文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录：\n\n```\nsudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/\nsudo scp user@linux1:/tmp/skills.key /etc/ssl/\nsudo chmod 644 /etc/ssl/skills.cert.pem\nsudo chmod 400 /etc/ssl/skills.key\n```\n\n现在，`linux1` 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。\n\n首先，在 `linux1` 上安装 Apache2：\n\n```\nsudo apt-get update\nsudo apt-get install apache2\n```\n\n然后，在 `linux1` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建服务器证书签名请求。\n\n接下来，在 `linux1` 上生成一个服务器证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的服务器证书。\n\n接下来，为 Apache2 配置 SSL：\n\n```\nsudo a2enmod ssl\nsudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf\nsudo vi /etc/apache2/sites-available/skills-ssl.conf\n```\n\n这个命令将复制默认的 SSL 配置文件，并将其重命名为 `skills-ssl.conf`。然后使用 vi 编辑器打开 `skills-ssl.conf` 文件，将以下内容添加到文件的末尾：\n\n```\nSSLEngine on\nSSLCertificateFile /etc/ssl/skills.cert.pem\nSSLCertificateKeyFile /etc/ssl/skills.key\n```\n\n保存并关闭文件。\n\n接下来，启用 `skills-ssl.conf` 配置文件：\n\n```\nsudo a2ensite skills-ssl.conf\n```\n\n然后重新启动 Apache2：\n\n```\nsudo service apache2 restart\n```\n\n现在，当用户访问 `https://skills.lan` 时，Apache2 将使用 `skills.cert.pem` 和 `skills.key` 文件提供 HTTPS 服务。并且，因为我们已经在 `linux1` 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。\n\n最后，让我们在其他 Linux 主机上测试 HTTPS 站点。\n\n首先，让我们在 `linux2` 上测试 HTTPS 站点：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux1:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux1` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 HTTPS 站点已成功配置。\n\n接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 `192.168.1.100`，请使用浏览器访问 `https://skills.lan`。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：\n\n![Firefox security warning](https://i.imgur.com/3Edd6wh.png)\n\n这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 \"Advanced...\"，然后单击 \"Accept the Risk and Continue\"，即可访问 HTTPS 站点。\n\n如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。\n\n至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n\n最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录。我们已经为 `linux1` 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 `linux2` 上。\n\n假设您已经在 `linux1` 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 `linux2` 上：\n\n```\nsudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/\n```\n\n这个命令将 `linux1` 上的 `/etc/ssl/skills.crt` 和 `/etc/ssl/skills.key` 文件复制到 `linux2` 上的 `/etc/ssl/` 目录中。\n\n现在，我们已经在 `linux2` 上复制了证书和私钥文件，让我们使用以下命令验证 `linux2` 上的 HTTPS 服务器是否工作正常：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux2:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux2` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 `linux2` 上的 HTTPS 站点已成功配置。\n\n至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n","slug":"dns服务","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtiq4s600024os65gvbajf0","content":"<h3 id=\"2-DNS服务\"><a href=\"#2-DNS服务\" class=\"headerlink\" title=\"2. DNS服务\"></a>2. DNS服务</h3><h4 id=\"2-1-防火墙设置\"><a href=\"#2-1-防火墙设置\" class=\"headerlink\" title=\"2.1 防火墙设置\"></a>2.1 防火墙设置</h4><p>在Ubuntu下，可以使用 <code>ufw</code> 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br><span class=\"line\">sudo ufw default deny incoming</span><br></pre></td></tr></table></figure>\n\n<p>然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 53/tcp</span><br><span class=\"line\">sudo ufw allow 53/udp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-NTP服务设置\"><a href=\"#2-2-NTP服务设置\" class=\"headerlink\" title=\"2.2 NTP服务设置\"></a>2.2 NTP服务设置</h4><p>使用 <code>chrony</code> 工具来配置NTP服务。首先，在linux1上安装 <code>chrony</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install chrony</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/chrony/chrony.conf</code> 文件中添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务</span><br></pre></td></tr></table></figure>\n\n<p>最后，启动 <code>chrony</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start chrony</span><br><span class=\"line\">sudo systemctl enable chrony</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-SSH认证设置\"><a href=\"#2-3-SSH认证设置\" class=\"headerlink\" title=\"2.3 SSH认证设置\"></a>2.3 SSH认证设置</h4><p>为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，在每个主机上将公钥添加到授权文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要修改SSH配置文件 <code>/etc/ssh/sshd_config</code> ，禁用密码认证。找到以下两个配置项，并将其值改为 <code>no</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">ChallengeResponseAuthentication no</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 SSH 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-DNS设置\"><a href=\"#2-4-DNS设置\" class=\"headerlink\" title=\"2.4 DNS设置\"></a>2.4 DNS设置</h4><p>首先，在linux1上安装 <code>bind</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/bind/named.conf.options</code> 文件中配置 DNS 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123;</span><br><span class=\"line\">    directory &quot;/var/cache/bind&quot;;</span><br><span class=\"line\">    recursion yes;</span><br><span class=\"line\">    allow-query &#123; any; &#125;;</span><br><span class=\"line\">    forwarders &#123;</span><br><span class=\"line\">        8.8.8.8; # Google DNS</span><br><span class=\"line\">        8.8.4.4;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;0.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：<code>skills.lan</code> 和 <code>0.168.192.in-addr.arpa</code>（这是内部网络的反向解析区域）。这些区域的信息将存储在 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192</code> 文件中。</p>\n<p>现在，我们需要创建这些区域文件。<br>首先，创建<code>/etc/bind/db.skills.lan</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN A    192.168.0.1</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了 <code>skills.lan</code> 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。</p>\n<p>然后，创建 <code>/etc/bind/db.192</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN PTR  skills.lan.</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。</p>\n<p>最后，启动 <code>bind</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start bind9</span><br><span class=\"line\">sudo systemctl enable bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在linux2上也安装 <code>bind</code>，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 <code>/etc/bind/named.conf.options</code> 中的 <code>forwarders</code> 改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forwarders &#123;</span><br><span class=\"line\">    192.168.0.1; # 主DNS服务器</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-CA证书设置\"><a href=\"#2-5-CA证书设置\" class=\"headerlink\" title=\"2.5 CA证书设置\"></a>2.5 CA证书设置</h4><p>首先，在linux1上安装 <code>easy-rsa</code> 工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install easy-rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，使用 <code>easy-rsa</code> 工具初始化 CA（证书颁发机构）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/share/easy-rsa</span><br><span class=\"line\">sudo ./easyrsa init-pki</span><br></pre></td></tr></table></figure>\n\n<p>接下来，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa build-ca</span><br></pre></td></tr></table></figure>\n\n<p>在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。</p>\n<p>然后，创建服务器证书签名请求（CSR）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa gen-req server nopass</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>server.req</code> 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 <code>skills.lan</code>。</p>\n<p>接下来，使用 CA签名服务器证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa sign-req server server</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 CA 的私钥对 <code>server.req</code> 文件进行签名，生成一个名为 <code>server.crt</code> 的服务器证书文件。</p>\n<p>然后，将证书和私钥文件复制到 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp pki/issued/server.crt /etc/ssl/certs/</span><br><span class=\"line\">sudo cp pki/private/server.key /etc/ssl/private/</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在 Apache2 中启用 SSL 模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 <code>/etc/apache2/sites-available/default-ssl.conf</code> 文件，配置 SSL 证书和私钥文件的路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/certs/server.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/private/server.key</span><br></pre></td></tr></table></figure>\n\n<p>然后，启用 SSL 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite default-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 Apache2 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<p>现在，访问 <code>https://linux1.skills.lan</code> 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 <code>/etc/ssl</code> 目录即可。</p>\n<p>(4) 配置 DNS 服务器</p>\n<p>接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 BIND9：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install bind9 bind9utils bind9-doc</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 BIND9 配置文件 <code>/etc/bind/named.conf.local</code>，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192.168.1&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这段配置文件指定了 BIND9 的两个 DNS 区域：<code>skills.lan</code> 和 <code>1.168.192.in-addr.arpa</code>。<code>skills.lan</code> 区域用于域名解析，<code>1.168.192.in-addr.arpa</code> 区域用于 IP 地址反向解析。</p>\n<p>然后，创建两个区域文件 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192.168.1</code>：</p>\n<ul>\n<li><code>/etc/bind/db.skills.lan</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">@       IN      A       192.168.1.101</span><br><span class=\"line\">linux1  IN      A       192.168.1.101</span><br><span class=\"line\">linux2  IN      A       192.168.1.102</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>/etc/bind/db.192.168.1</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND reverse data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">101     IN      PTR     linux1.skills.lan.</span><br><span class=\"line\">102     IN      PTR     linux2.skills.lan.</span><br></pre></td></tr></table></figure>\n\n<p>这两个文件分别定义了 <code>skills.lan</code> 区域和 <code>1.168.192.in-addr.arpa</code> 区域的记录。</p>\n<p>最后，重启 BIND9 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart bind9</span><br></pre></td></tr></table></figure>\n\n<p>现在，所有 Linux 主机都可以通过 <code>linux1</code> 和 <code>linux2</code> 进行 DNS 解析和反向解析了。如果 <code>linux1</code> 挂了，<code>linux2</code> 会自动接管 DNS 服务。</p>\n<p>(5) 配置 CA 服务器和证书</p>\n<p>最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 OpenSSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/ssl</span><br><span class=\"line\">sudo mkdir CA</span><br><span class=\"line\">cd CA</span><br><span class=\"line\">sudo mkdir certs crl newcerts private</span><br><span class=\"line\">sudo chmod 700 private</span><br><span class=\"line\">sudo touch index.txt</span><br><span class=\"line\">echo 1000 &gt; serial</span><br><span class=\"line\">sudo openssl genrsa -aes256 -out private/ca.key.pem 4096</span><br><span class=\"line\">sudo chmod 400 private/ca.key.pem</span><br><span class=\"line\">sudo openssl req -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -key private/ca.key.pem \\</span><br><span class=\"line\">    -new -x509 -days 3650 -sha256 -extensions v3_ca \\</span><br><span class=\"line\">    -out certs/ca.cert.pem</span><br><span class=\"line\">sudo chmod 444 certs/ca.cert.pem</span><br></pre></td></tr></table></figure>\n\n<p>这段命令生成了一个名为 <code>ca.key.pem</code> 的私钥和一个名为 <code>ca.cert.pem</code> 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/</span><br><span class=\"line\">sudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>user</code> 是你在 <code>linux2</code> 主机上的用户名。</p>\n<p>然后，在 <code>linux2</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建证书签名请求。</p>\n<p>接下来，在 <code>linux2</code> 上生成一个证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的证书。</p>\n<p>最后，将 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/</span><br><span class=\"line\">sudo scp user@linux1:/tmp/skills.key /etc/ssl/</span><br><span class=\"line\">sudo chmod 644 /etc/ssl/skills.cert.pem</span><br><span class=\"line\">sudo chmod 400 /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>现在，<code>linux1</code> 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。</p>\n<p>首先，在 <code>linux1</code> 上安装 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>linux1</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建服务器证书签名请求。</p>\n<p>接下来，在 <code>linux1</code> 上生成一个服务器证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的服务器证书。</p>\n<p>接下来，为 Apache2 配置 SSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br><span class=\"line\">sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf</span><br><span class=\"line\">sudo vi /etc/apache2/sites-available/skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将复制默认的 SSL 配置文件，并将其重命名为 <code>skills-ssl.conf</code>。然后使用 vi 编辑器打开 <code>skills-ssl.conf</code> 文件，将以下内容添加到文件的末尾：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLCertificateFile /etc/ssl/skills.cert.pem</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<p>接下来，启用 <code>skills-ssl.conf</code> 配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当用户访问 <code>https://skills.lan</code> 时，Apache2 将使用 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件提供 HTTPS 服务。并且，因为我们已经在 <code>linux1</code> 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。</p>\n<p>最后，让我们在其他 Linux 主机上测试 HTTPS 站点。</p>\n<p>首先，让我们在 <code>linux2</code> 上测试 HTTPS 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux1:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux1</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 HTTPS 站点已成功配置。</p>\n<p>接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 <code>192.168.1.100</code>，请使用浏览器访问 <code>https://skills.lan</code>。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：</p>\n<p><img src=\"https://i.imgur.com/3Edd6wh.png\" alt=\"Firefox security warning\"></p>\n<p>这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 “Advanced…”，然后单击 “Accept the Risk and Continue”，即可访问 HTTPS 站点。</p>\n<p>如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。</p>\n<p>至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n<p>最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录。我们已经为 <code>linux1</code> 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 <code>linux2</code> 上。</p>\n<p>假设您已经在 <code>linux1</code> 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 <code>linux2</code> 上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将 <code>linux1</code> 上的 <code>/etc/ssl/skills.crt</code> 和 <code>/etc/ssl/skills.key</code> 文件复制到 <code>linux2</code> 上的 <code>/etc/ssl/</code> 目录中。</p>\n<p>现在，我们已经在 <code>linux2</code> 上复制了证书和私钥文件，让我们使用以下命令验证 <code>linux2</code> 上的 HTTPS 服务器是否工作正常：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux2:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux2</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 <code>linux2</code> 上的 HTTPS 站点已成功配置。</p>\n<p>至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n","site":{"data":{}},"abbrlink":1002,"excerpt":"","more":"<h3 id=\"2-DNS服务\"><a href=\"#2-DNS服务\" class=\"headerlink\" title=\"2. DNS服务\"></a>2. DNS服务</h3><h4 id=\"2-1-防火墙设置\"><a href=\"#2-1-防火墙设置\" class=\"headerlink\" title=\"2.1 防火墙设置\"></a>2.1 防火墙设置</h4><p>在Ubuntu下，可以使用 <code>ufw</code> 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br><span class=\"line\">sudo ufw default deny incoming</span><br></pre></td></tr></table></figure>\n\n<p>然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 53/tcp</span><br><span class=\"line\">sudo ufw allow 53/udp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-NTP服务设置\"><a href=\"#2-2-NTP服务设置\" class=\"headerlink\" title=\"2.2 NTP服务设置\"></a>2.2 NTP服务设置</h4><p>使用 <code>chrony</code> 工具来配置NTP服务。首先，在linux1上安装 <code>chrony</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install chrony</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/chrony/chrony.conf</code> 文件中添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务</span><br></pre></td></tr></table></figure>\n\n<p>最后，启动 <code>chrony</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start chrony</span><br><span class=\"line\">sudo systemctl enable chrony</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-SSH认证设置\"><a href=\"#2-3-SSH认证设置\" class=\"headerlink\" title=\"2.3 SSH认证设置\"></a>2.3 SSH认证设置</h4><p>为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，在每个主机上将公钥添加到授权文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要修改SSH配置文件 <code>/etc/ssh/sshd_config</code> ，禁用密码认证。找到以下两个配置项，并将其值改为 <code>no</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">ChallengeResponseAuthentication no</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 SSH 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-DNS设置\"><a href=\"#2-4-DNS设置\" class=\"headerlink\" title=\"2.4 DNS设置\"></a>2.4 DNS设置</h4><p>首先，在linux1上安装 <code>bind</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/bind/named.conf.options</code> 文件中配置 DNS 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123;</span><br><span class=\"line\">    directory &quot;/var/cache/bind&quot;;</span><br><span class=\"line\">    recursion yes;</span><br><span class=\"line\">    allow-query &#123; any; &#125;;</span><br><span class=\"line\">    forwarders &#123;</span><br><span class=\"line\">        8.8.8.8; # Google DNS</span><br><span class=\"line\">        8.8.4.4;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;0.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：<code>skills.lan</code> 和 <code>0.168.192.in-addr.arpa</code>（这是内部网络的反向解析区域）。这些区域的信息将存储在 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192</code> 文件中。</p>\n<p>现在，我们需要创建这些区域文件。<br>首先，创建<code>/etc/bind/db.skills.lan</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN A    192.168.0.1</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了 <code>skills.lan</code> 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。</p>\n<p>然后，创建 <code>/etc/bind/db.192</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN PTR  skills.lan.</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。</p>\n<p>最后，启动 <code>bind</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start bind9</span><br><span class=\"line\">sudo systemctl enable bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在linux2上也安装 <code>bind</code>，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 <code>/etc/bind/named.conf.options</code> 中的 <code>forwarders</code> 改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forwarders &#123;</span><br><span class=\"line\">    192.168.0.1; # 主DNS服务器</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-CA证书设置\"><a href=\"#2-5-CA证书设置\" class=\"headerlink\" title=\"2.5 CA证书设置\"></a>2.5 CA证书设置</h4><p>首先，在linux1上安装 <code>easy-rsa</code> 工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install easy-rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，使用 <code>easy-rsa</code> 工具初始化 CA（证书颁发机构）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/share/easy-rsa</span><br><span class=\"line\">sudo ./easyrsa init-pki</span><br></pre></td></tr></table></figure>\n\n<p>接下来，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa build-ca</span><br></pre></td></tr></table></figure>\n\n<p>在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。</p>\n<p>然后，创建服务器证书签名请求（CSR）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa gen-req server nopass</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>server.req</code> 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 <code>skills.lan</code>。</p>\n<p>接下来，使用 CA签名服务器证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa sign-req server server</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 CA 的私钥对 <code>server.req</code> 文件进行签名，生成一个名为 <code>server.crt</code> 的服务器证书文件。</p>\n<p>然后，将证书和私钥文件复制到 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp pki/issued/server.crt /etc/ssl/certs/</span><br><span class=\"line\">sudo cp pki/private/server.key /etc/ssl/private/</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在 Apache2 中启用 SSL 模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 <code>/etc/apache2/sites-available/default-ssl.conf</code> 文件，配置 SSL 证书和私钥文件的路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/certs/server.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/private/server.key</span><br></pre></td></tr></table></figure>\n\n<p>然后，启用 SSL 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite default-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 Apache2 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<p>现在，访问 <code>https://linux1.skills.lan</code> 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 <code>/etc/ssl</code> 目录即可。</p>\n<p>(4) 配置 DNS 服务器</p>\n<p>接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 BIND9：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install bind9 bind9utils bind9-doc</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 BIND9 配置文件 <code>/etc/bind/named.conf.local</code>，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192.168.1&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这段配置文件指定了 BIND9 的两个 DNS 区域：<code>skills.lan</code> 和 <code>1.168.192.in-addr.arpa</code>。<code>skills.lan</code> 区域用于域名解析，<code>1.168.192.in-addr.arpa</code> 区域用于 IP 地址反向解析。</p>\n<p>然后，创建两个区域文件 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192.168.1</code>：</p>\n<ul>\n<li><code>/etc/bind/db.skills.lan</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">@       IN      A       192.168.1.101</span><br><span class=\"line\">linux1  IN      A       192.168.1.101</span><br><span class=\"line\">linux2  IN      A       192.168.1.102</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>/etc/bind/db.192.168.1</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND reverse data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">101     IN      PTR     linux1.skills.lan.</span><br><span class=\"line\">102     IN      PTR     linux2.skills.lan.</span><br></pre></td></tr></table></figure>\n\n<p>这两个文件分别定义了 <code>skills.lan</code> 区域和 <code>1.168.192.in-addr.arpa</code> 区域的记录。</p>\n<p>最后，重启 BIND9 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart bind9</span><br></pre></td></tr></table></figure>\n\n<p>现在，所有 Linux 主机都可以通过 <code>linux1</code> 和 <code>linux2</code> 进行 DNS 解析和反向解析了。如果 <code>linux1</code> 挂了，<code>linux2</code> 会自动接管 DNS 服务。</p>\n<p>(5) 配置 CA 服务器和证书</p>\n<p>最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 OpenSSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/ssl</span><br><span class=\"line\">sudo mkdir CA</span><br><span class=\"line\">cd CA</span><br><span class=\"line\">sudo mkdir certs crl newcerts private</span><br><span class=\"line\">sudo chmod 700 private</span><br><span class=\"line\">sudo touch index.txt</span><br><span class=\"line\">echo 1000 &gt; serial</span><br><span class=\"line\">sudo openssl genrsa -aes256 -out private/ca.key.pem 4096</span><br><span class=\"line\">sudo chmod 400 private/ca.key.pem</span><br><span class=\"line\">sudo openssl req -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -key private/ca.key.pem \\</span><br><span class=\"line\">    -new -x509 -days 3650 -sha256 -extensions v3_ca \\</span><br><span class=\"line\">    -out certs/ca.cert.pem</span><br><span class=\"line\">sudo chmod 444 certs/ca.cert.pem</span><br></pre></td></tr></table></figure>\n\n<p>这段命令生成了一个名为 <code>ca.key.pem</code> 的私钥和一个名为 <code>ca.cert.pem</code> 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/</span><br><span class=\"line\">sudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>user</code> 是你在 <code>linux2</code> 主机上的用户名。</p>\n<p>然后，在 <code>linux2</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建证书签名请求。</p>\n<p>接下来，在 <code>linux2</code> 上生成一个证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的证书。</p>\n<p>最后，将 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/</span><br><span class=\"line\">sudo scp user@linux1:/tmp/skills.key /etc/ssl/</span><br><span class=\"line\">sudo chmod 644 /etc/ssl/skills.cert.pem</span><br><span class=\"line\">sudo chmod 400 /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>现在，<code>linux1</code> 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。</p>\n<p>首先，在 <code>linux1</code> 上安装 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>linux1</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建服务器证书签名请求。</p>\n<p>接下来，在 <code>linux1</code> 上生成一个服务器证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的服务器证书。</p>\n<p>接下来，为 Apache2 配置 SSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br><span class=\"line\">sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf</span><br><span class=\"line\">sudo vi /etc/apache2/sites-available/skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将复制默认的 SSL 配置文件，并将其重命名为 <code>skills-ssl.conf</code>。然后使用 vi 编辑器打开 <code>skills-ssl.conf</code> 文件，将以下内容添加到文件的末尾：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLCertificateFile /etc/ssl/skills.cert.pem</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<p>接下来，启用 <code>skills-ssl.conf</code> 配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当用户访问 <code>https://skills.lan</code> 时，Apache2 将使用 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件提供 HTTPS 服务。并且，因为我们已经在 <code>linux1</code> 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。</p>\n<p>最后，让我们在其他 Linux 主机上测试 HTTPS 站点。</p>\n<p>首先，让我们在 <code>linux2</code> 上测试 HTTPS 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux1:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux1</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 HTTPS 站点已成功配置。</p>\n<p>接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 <code>192.168.1.100</code>，请使用浏览器访问 <code>https://skills.lan</code>。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：</p>\n<p><img src=\"https://i.imgur.com/3Edd6wh.png\" alt=\"Firefox security warning\"></p>\n<p>这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 “Advanced…”，然后单击 “Accept the Risk and Continue”，即可访问 HTTPS 站点。</p>\n<p>如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。</p>\n<p>至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n<p>最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录。我们已经为 <code>linux1</code> 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 <code>linux2</code> 上。</p>\n<p>假设您已经在 <code>linux1</code> 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 <code>linux2</code> 上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将 <code>linux1</code> 上的 <code>/etc/ssl/skills.crt</code> 和 <code>/etc/ssl/skills.key</code> 文件复制到 <code>linux2</code> 上的 <code>/etc/ssl/</code> 目录中。</p>\n<p>现在，我们已经在 <code>linux2</code> 上复制了证书和私钥文件，让我们使用以下命令验证 <code>linux2</code> 上的 HTTPS 服务器是否工作正常：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux2:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux2</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 <code>linux2</code> 上的 HTTPS 站点已成功配置。</p>\n<p>至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-04-22T23:21:38.224Z","updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtiq4sf00034os6am924i0g","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"abbrlink":1003,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"tomcat服务","date":"2023-04-21T16:07:10.000Z","_content":"\n\n\n1. 配置linux2为nginx服务器\n\na. 安装Nginx\n\n使用以下命令安装Nginx：\n\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\nb. 配置默认文档\n\n默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为\"hellonginx\"：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n找到index指令，将其修改为：\n\n```\nindex  hellonginx;\n```\n\n保存并退出文件。\n\nc. 配置HTTPS\n\n安装certbot工具来申请免费的Let's Encrypt SSL证书：\n\n```\nsudo apt-get update\nsudo apt-get install certbot python3-certbot-nginx\n```\n\n运行以下命令为Nginx服务器配置HTTPS：\n\n```\nsudo certbot --nginx -d your-domain-name\n```\n\n将your-domain-name替换为您的域名。按照命令提示完成配置。\n\nd. 配置HTTP重定向到HTTPS\n\n为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：\n\n```\nsudo vim /etc/nginx/nginx.conf\n```\n\n在http块中添加以下代码：\n\n```\nserver {\n    listen 80;\n    server_name your-domain-name;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将your-domain-name替换为您的域名。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n2. 利用nginx反向代理，实现linux3和linux4的tomcat负载均衡\n\na. 安装Tomcat\n\n在linux3和linux4上分别安装Tomcat：\n\n```\nsudo apt-get update\nsudo apt-get install tomcat9\n```\n\nb. 配置Tomcat\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n添加以下配置，启用AJP协议和负载均衡：\n\n```\n<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n<Engine name=\"Catalina\" defaultHost=\"localhost\">\n  <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\">\n    <Manager className=\"org.apache.catalina.ha.session.DeltaManager\" expireSessionsOnShutdown=\"false\" notifyListenersOnReplication=\"true\"/>\n    <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n      <Membership className=\"org.apache.catalina.tribes.membership.McastService\" address=\"228.0.0.4\" port=\"45564\" frequency=\"500\" dropTime=\"3000\"/>\n      <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\" address=\"auto\" port=\"4000\" autoBind=\"100\" selectorTimeout=\"5000\" maxThreads=\"6\"/>\n      <Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n        <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n      </Sender>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch        />\n    </Channel>\n    <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\" filter=\"\"/>\n    <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n    <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n  </Cluster>\n</Engine>\n```\n\n保存并退出文件。\n\nc. 配置Nginx\n\n打开Nginx的配置文件：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n添加以下配置，用于反向代理Tomcat服务器：\n\n```\nupstream tomcat_backend {\n    server linux3:8080 weight=5;\n    server linux4:8080 weight=5;\n}\n\nserver {\n    listen 443 ssl;\n    server_name tomcat.skills.lan;\n\n    ssl_certificate /etc/ssl/skills.jks;\n    ssl_certificate_key /etc/ssl/skills.jks;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://tomcat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n    server_name tomcat.skills.lan;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n3. 配置linux3和linux4为Tomcat服务器\n\na. 配置默认首页\n\n在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为\"tomcatA\"或\"tomcatB\"：\n\n```\nsudo mkdir /var/lib/tomcat9/webapps/ROOT\nsudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp\n```\n\n```\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>TomcatA</title>\n</head>\n<body>\n\t<h1>TomcatA</h1>\n</body>\n</html>\n```\n\n保存并退出文件。\n\n在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为\"tomcatB\"。\n\nb. 配置HTTP和HTTPS\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：\n\n```\n<Connector port=\"80\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"443\" />\n\n<Connector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n           maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n           keystoreFile=\"/etc/ssl/skills.jks\"\n           keystorePass=\"your-password\"\n           clientAuth=\"false\" sslProtocol=\"TLS\" />\n```\n\n将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。\n\n重启Tomcat服务以应用更改：\n\n```\nsudo service tomcat9 restart\n```\n\n在另一个Tomcat服务器上重复此过程。\n\n现在，您应该能够通过https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。\n\n以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！\n","source":"_posts/tomcat服务.md","raw":"---\ntitle: tomcat服务\ndate: 2023-04-22 00:07:10\ntags:\n---\n\n\n\n1. 配置linux2为nginx服务器\n\na. 安装Nginx\n\n使用以下命令安装Nginx：\n\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\nb. 配置默认文档\n\n默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为\"hellonginx\"：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n找到index指令，将其修改为：\n\n```\nindex  hellonginx;\n```\n\n保存并退出文件。\n\nc. 配置HTTPS\n\n安装certbot工具来申请免费的Let's Encrypt SSL证书：\n\n```\nsudo apt-get update\nsudo apt-get install certbot python3-certbot-nginx\n```\n\n运行以下命令为Nginx服务器配置HTTPS：\n\n```\nsudo certbot --nginx -d your-domain-name\n```\n\n将your-domain-name替换为您的域名。按照命令提示完成配置。\n\nd. 配置HTTP重定向到HTTPS\n\n为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：\n\n```\nsudo vim /etc/nginx/nginx.conf\n```\n\n在http块中添加以下代码：\n\n```\nserver {\n    listen 80;\n    server_name your-domain-name;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将your-domain-name替换为您的域名。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n2. 利用nginx反向代理，实现linux3和linux4的tomcat负载均衡\n\na. 安装Tomcat\n\n在linux3和linux4上分别安装Tomcat：\n\n```\nsudo apt-get update\nsudo apt-get install tomcat9\n```\n\nb. 配置Tomcat\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n添加以下配置，启用AJP协议和负载均衡：\n\n```\n<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n<Engine name=\"Catalina\" defaultHost=\"localhost\">\n  <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\">\n    <Manager className=\"org.apache.catalina.ha.session.DeltaManager\" expireSessionsOnShutdown=\"false\" notifyListenersOnReplication=\"true\"/>\n    <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n      <Membership className=\"org.apache.catalina.tribes.membership.McastService\" address=\"228.0.0.4\" port=\"45564\" frequency=\"500\" dropTime=\"3000\"/>\n      <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\" address=\"auto\" port=\"4000\" autoBind=\"100\" selectorTimeout=\"5000\" maxThreads=\"6\"/>\n      <Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n        <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n      </Sender>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch        />\n    </Channel>\n    <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\" filter=\"\"/>\n    <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n    <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n  </Cluster>\n</Engine>\n```\n\n保存并退出文件。\n\nc. 配置Nginx\n\n打开Nginx的配置文件：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n添加以下配置，用于反向代理Tomcat服务器：\n\n```\nupstream tomcat_backend {\n    server linux3:8080 weight=5;\n    server linux4:8080 weight=5;\n}\n\nserver {\n    listen 443 ssl;\n    server_name tomcat.skills.lan;\n\n    ssl_certificate /etc/ssl/skills.jks;\n    ssl_certificate_key /etc/ssl/skills.jks;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://tomcat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n    server_name tomcat.skills.lan;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n3. 配置linux3和linux4为Tomcat服务器\n\na. 配置默认首页\n\n在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为\"tomcatA\"或\"tomcatB\"：\n\n```\nsudo mkdir /var/lib/tomcat9/webapps/ROOT\nsudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp\n```\n\n```\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>TomcatA</title>\n</head>\n<body>\n\t<h1>TomcatA</h1>\n</body>\n</html>\n```\n\n保存并退出文件。\n\n在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为\"tomcatB\"。\n\nb. 配置HTTP和HTTPS\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：\n\n```\n<Connector port=\"80\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"443\" />\n\n<Connector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n           maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n           keystoreFile=\"/etc/ssl/skills.jks\"\n           keystorePass=\"your-password\"\n           clientAuth=\"false\" sslProtocol=\"TLS\" />\n```\n\n将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。\n\n重启Tomcat服务以应用更改：\n\n```\nsudo service tomcat9 restart\n```\n\n在另一个Tomcat服务器上重复此过程。\n\n现在，您应该能够通过https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。\n\n以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！\n","slug":"tomcat服务","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtiq4t900044os6gyvbhe46","content":"<ol>\n<li>配置linux2为nginx服务器</li>\n</ol>\n<p>a. 安装Nginx</p>\n<p>使用以下命令安装Nginx：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置默认文档</p>\n<p>默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为”hellonginx”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>找到index指令，将其修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index  hellonginx;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置HTTPS</p>\n<p>安装certbot工具来申请免费的Let’s Encrypt SSL证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<p>运行以下命令为Nginx服务器配置HTTPS：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d your-domain-name</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。按照命令提示完成配置。</p>\n<p>d. 配置HTTP重定向到HTTPS</p>\n<p>为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>在http块中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your-domain-name;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>利用nginx反向代理，实现linux3和linux4的tomcat负载均衡</li>\n</ol>\n<p>a. 安装Tomcat</p>\n<p>在linux3和linux4上分别安装Tomcat：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install tomcat9</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置Tomcat</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，启用AJP协议和负载均衡：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\">  &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&gt;</span><br><span class=\"line\">    &lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot; expireSessionsOnShutdown=&quot;false&quot; notifyListenersOnReplication=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class=\"line\">      &lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot; address=&quot;228.0.0.4&quot; port=&quot;45564&quot; frequency=&quot;500&quot; dropTime=&quot;3000&quot;/&gt;</span><br><span class=\"line\">      &lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot; address=&quot;auto&quot; port=&quot;4000&quot; autoBind=&quot;100&quot; selectorTimeout=&quot;5000&quot; maxThreads=&quot;6&quot;/&gt;</span><br><span class=\"line\">      &lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class=\"line\">        &lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&gt;</span><br><span class=\"line\">      &lt;/Sender&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch        /&gt;</span><br><span class=\"line\">    &lt;/Channel&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot; filter=&quot;&quot;/&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&gt;</span><br><span class=\"line\">    &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&gt;</span><br><span class=\"line\">  &lt;/Cluster&gt;</span><br><span class=\"line\">&lt;/Engine&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置Nginx</p>\n<p>打开Nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，用于反向代理Tomcat服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tomcat_backend &#123;</span><br><span class=\"line\">    server linux3:8080 weight=5;</span><br><span class=\"line\">    server linux4:8080 weight=5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://tomcat_backend;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li>配置linux3和linux4为Tomcat服务器</li>\n</ol>\n<p>a. 配置默认首页</p>\n<p>在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为”tomcatA”或”tomcatB”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/lib/tomcat9/webapps/ROOT</span><br><span class=\"line\">sudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;TomcatA&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;TomcatA&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为”tomcatB”。</p>\n<p>b. 配置HTTP和HTTPS</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">           connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">           redirectPort=&quot;443&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span><br><span class=\"line\">           maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class=\"line\">           keystoreFile=&quot;/etc/ssl/skills.jks&quot;</span><br><span class=\"line\">           keystorePass=&quot;your-password&quot;</span><br><span class=\"line\">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。</p>\n<p>重启Tomcat服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service tomcat9 restart</span><br></pre></td></tr></table></figure>\n\n<p>在另一个Tomcat服务器上重复此过程。</p>\n<p>现在，您应该能够通过<a href=\"https://tomcat.skills.lan访问负载均衡tomcat集群,并在每个tomcat服务器上看到不同的默认首页内容./\">https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。</a></p>\n<p>以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！</p>\n","site":{"data":{}},"abbrlink":1004,"excerpt":"","more":"<ol>\n<li>配置linux2为nginx服务器</li>\n</ol>\n<p>a. 安装Nginx</p>\n<p>使用以下命令安装Nginx：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置默认文档</p>\n<p>默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为”hellonginx”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>找到index指令，将其修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index  hellonginx;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置HTTPS</p>\n<p>安装certbot工具来申请免费的Let’s Encrypt SSL证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<p>运行以下命令为Nginx服务器配置HTTPS：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d your-domain-name</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。按照命令提示完成配置。</p>\n<p>d. 配置HTTP重定向到HTTPS</p>\n<p>为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>在http块中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your-domain-name;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>利用nginx反向代理，实现linux3和linux4的tomcat负载均衡</li>\n</ol>\n<p>a. 安装Tomcat</p>\n<p>在linux3和linux4上分别安装Tomcat：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install tomcat9</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置Tomcat</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，启用AJP协议和负载均衡：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\">  &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&gt;</span><br><span class=\"line\">    &lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot; expireSessionsOnShutdown=&quot;false&quot; notifyListenersOnReplication=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class=\"line\">      &lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot; address=&quot;228.0.0.4&quot; port=&quot;45564&quot; frequency=&quot;500&quot; dropTime=&quot;3000&quot;/&gt;</span><br><span class=\"line\">      &lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot; address=&quot;auto&quot; port=&quot;4000&quot; autoBind=&quot;100&quot; selectorTimeout=&quot;5000&quot; maxThreads=&quot;6&quot;/&gt;</span><br><span class=\"line\">      &lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class=\"line\">        &lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&gt;</span><br><span class=\"line\">      &lt;/Sender&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch        /&gt;</span><br><span class=\"line\">    &lt;/Channel&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot; filter=&quot;&quot;/&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&gt;</span><br><span class=\"line\">    &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&gt;</span><br><span class=\"line\">  &lt;/Cluster&gt;</span><br><span class=\"line\">&lt;/Engine&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置Nginx</p>\n<p>打开Nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，用于反向代理Tomcat服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tomcat_backend &#123;</span><br><span class=\"line\">    server linux3:8080 weight=5;</span><br><span class=\"line\">    server linux4:8080 weight=5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://tomcat_backend;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li>配置linux3和linux4为Tomcat服务器</li>\n</ol>\n<p>a. 配置默认首页</p>\n<p>在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为”tomcatA”或”tomcatB”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/lib/tomcat9/webapps/ROOT</span><br><span class=\"line\">sudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;TomcatA&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;TomcatA&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为”tomcatB”。</p>\n<p>b. 配置HTTP和HTTPS</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">           connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">           redirectPort=&quot;443&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span><br><span class=\"line\">           maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class=\"line\">           keystoreFile=&quot;/etc/ssl/skills.jks&quot;</span><br><span class=\"line\">           keystorePass=&quot;your-password&quot;</span><br><span class=\"line\">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。</p>\n<p>重启Tomcat服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service tomcat9 restart</span><br></pre></td></tr></table></figure>\n\n<p>在另一个Tomcat服务器上重复此过程。</p>\n<p>现在，您应该能够通过<a href=\"https://tomcat.skills.lan访问负载均衡tomcat集群,并在每个tomcat服务器上看到不同的默认首页内容./\">https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。</a></p>\n<p>以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[],"abbrlink":[{"_id":"c-thiskeyusingbyabbrlink2","maxid":1004},{"_id":"clgtiq4qp00004os6fwhp0fgr","maxid":1001},{"_id":"clgtiq4rp00014os6494vbcs8","maxid":1002},{"_id":"clgtiq4s600024os65gvbajf0","maxid":1002},{"_id":"clgtiq4sf00034os6am924i0g","maxid":1003},{"_id":"clgtiq4t900044os6gyvbhe46","maxid":1004}]}}