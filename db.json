{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ansible服务.md","hash":"a9cf4575edb4529af251853cea70bba4b11c489c","modified":1682205554294},{"_id":"source/_posts/apache2服务器.md","hash":"6883ac7731dbcf231d087351cfc29ce6df4abbe7","modified":1682205554294},{"_id":"source/_posts/dns服务.md","hash":"78cfe4ff0ac5a25693f20c70e5ff3e292081ed7d","modified":1682205554294},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1682205554294},{"_id":"source/_posts/tomcat服务.md","hash":"78b3d501f3769f0617b3ee733627f3b58d7a576e","modified":1682205554294},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1682261160285},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1682261161235},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1682261161235},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":1682261161545},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"12931142de278c77d4f3af08568036782efd4c15","modified":1682261161235},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"c7a060713f72ec8b4a45244b3aa8d51d772f5ce8","modified":1682261161555},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1682261161545},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1682261161545},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1682261161565},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1682261161565},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1682261161285},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1682261161325},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1682261161545},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1682261161545},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1682261161545},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1682261161555},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1682261161555},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1682261161235},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1682261161265},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1682261161355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"83a1f2d31792206d432e8e2041e284d88327c02e","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1682261160355},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1682261161155},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1682261161145},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1682261161165},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1682261161215},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1682261161235},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1682261161215},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1682261161215},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1682261161145},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1682261161155},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1682261161165},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1682261161165},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1682261161185},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1682261161185},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1682261161205},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1682261161205},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1682261161135},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1682261161135},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1682261161155},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1682261161185},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1682261161205},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1682261161215},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1682261161505},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1682261160345},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1682261161235},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1682261160345},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1682261161205},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1682261161225},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1682261161225},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1682261161275},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"021ccdca211cce0438a378ada37897a8ffcb9574","modified":1682261161335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1682261161335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1682261161355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1682261161365},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1682261161425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"68cda524337dfe2e1467318a4a6c124b4c3845a7","modified":1682261161355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1682261161365},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1682261161285},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"294df7a74cf36af3a7030274d8b745979c1c8c70","modified":1682261161425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1682261161325},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1682261161335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"a59bcfbb609a099c1bf5be40b7a94e7e2b06fc4a","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1682261161425},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1682261161285},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1682261161415},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1682261161295},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1682261161295},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1682261161295},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1682261161305},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1682261161305},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1682261161305},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1682261161315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1682261161315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1682261161315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1682261161315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1682261161315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1682261161315},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1682261161495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1682261161505},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1682261161495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1682261161465},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1682261161215},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1682261161475},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1682261161485},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"45d71dbb2a61e30989851ba29bb8be7094574d14","modified":1682261161495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1682261161485},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1682261161525},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1682261161465},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1682261161495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1682261161495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1682261161495},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1682261161465},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1682261161505},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1682261160305},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1682261161465},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1682261161475},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1682261161475},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1682261161485},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"bb470da1d2ba292cae0a30a252f82f37c4130d2d","modified":1682261161505},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1682261161535},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1682261161095},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1682261161185},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1682261161255},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1682261161375},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1682261161285},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1682261161375},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1682261161335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1682261161335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1682261161335},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1682261161375},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1682261161285},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a833715eec2171ff05664d6d5752a57c954192ce","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9c16ff9cdc444ebf47eed33ea35b8366459a18f0","modified":1682261161355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1682261161355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1682261161395},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1682261161285},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1682261161355},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1682261161445},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1682261161455},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1682261161275},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1682261161345},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1682261161405},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1682261161255},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1682261161275},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1682261161385},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1682261161435},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1682261161485},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1682261161505},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1682261161485},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1682261161505},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1682261161515},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1682261161215},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1682261161475},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1682261161215},{"_id":"public/archives/index.html","hash":"4f887a0ff420d688b303b34df8050eadad75e623","modified":1682261413828},{"_id":"public/archives/2023/index.html","hash":"ad1174b4a422f3a849c97d6eff004bd5721edaa1","modified":1682261413828},{"_id":"public/archives/2023/04/index.html","hash":"eca1bdf1f719733467fa817b45507650462859ae","modified":1682261413828},{"_id":"public/posts/1003/index.html","hash":"686af91c18e30fde361e3ad500cb97c8254df14d","modified":1682261413828},{"_id":"public/posts/1002/index.html","hash":"f1472c84414b306bb414f43bc2e7a86b89743c84","modified":1682261413828},{"_id":"public/posts/1001/index.html","hash":"f373781ea614d47386db8b26ee00ebc78ceb2697","modified":1682261413828},{"_id":"public/index.html","hash":"3dbf1db42ce14ef9c8fef6b51e27a86f42a0fe82","modified":1682261413828},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1682261413828},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1682261413828},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1682261413828},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1682261413828},{"_id":"public/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1682261413828},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1682261413828},{"_id":"public/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1682261413828},{"_id":"public/css/index.css","hash":"93671a33562136eb8ba7ee1b4b1afa55a13ef362","modified":1682261413828},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1682261413828},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1682261413828}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ansible服务","date":"2023-04-21T15:55:04.000Z","_content":"\n\n\n安装Ansible和设置控制节点：\n\n1. 在linux1上安装Ansible，可以使用以下命令：\n\n   ```\n   sudo apt update\n   sudo apt install ansible\n   ```\n\n2. 配置Ansible的主机清单文件。在控制节点上使用vim编辑文件/etc/ansible/hosts，添加受控节点的IP地址或主机名。例如：\n\n   ```\n   [web_servers]\n   linux2 ansible_host=192.168.0.2\n   linux3 ansible_host=192.168.0.3\n   linux4 ansible_host=192.168.0.4\n\n   [database_servers]\n   linux5 ansible_host=192.168.0.5\n   linux6 ansible_host=192.168.0.6\n   linux7 ansible_host=192.168.0.7\n\n   [all:vars]\n   ansible_user=your_user_name\n   ansible_ssh_private_key_file=/path/to/your/private/key\n   ```\n\n   注意：将your_user_name和/path/to/your/private/key替换为实际的用户名和私钥路径。\n\n3. 验证Ansible是否可以与所有受控节点通信。可以使用以下命令：\n\n   ```\n   ansible all -m ping\n   ```\n\n   如果所有节点都响应pong，则表示成功。\n\n   注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。\n\n使用Ansible进行自动化运维：\n\n现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：\n\n1. 运行命令\n\n   ```\n   ansible all -a \"ls -l /var/log\"\n   ```\n\n   将在所有受控节点上运行命令“ls -l /var/log”。\n\n2. 复制文件\n\n   ```\n   ansible all -m copy -a \"src=/path/to/local/file dest=/path/to/remote/file\"\n   ```\n\n   将在所有受控节点上复制本地文件到远程目录。\n\n3. 安装软件包\n\n   ```\n   ansible all -m apt -a \"name=nginx state=present\"\n   ```\n\n   将在所有受控节点上安装Nginx软件包。\n\n以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。\n","source":"_posts/ansible服务.md","raw":"---\ntitle: ansible服务\ndate: 2023-04-21 23:55:04\ntags:\n---\n\n\n\n安装Ansible和设置控制节点：\n\n1. 在linux1上安装Ansible，可以使用以下命令：\n\n   ```\n   sudo apt update\n   sudo apt install ansible\n   ```\n\n2. 配置Ansible的主机清单文件。在控制节点上使用vim编辑文件/etc/ansible/hosts，添加受控节点的IP地址或主机名。例如：\n\n   ```\n   [web_servers]\n   linux2 ansible_host=192.168.0.2\n   linux3 ansible_host=192.168.0.3\n   linux4 ansible_host=192.168.0.4\n\n   [database_servers]\n   linux5 ansible_host=192.168.0.5\n   linux6 ansible_host=192.168.0.6\n   linux7 ansible_host=192.168.0.7\n\n   [all:vars]\n   ansible_user=your_user_name\n   ansible_ssh_private_key_file=/path/to/your/private/key\n   ```\n\n   注意：将your_user_name和/path/to/your/private/key替换为实际的用户名和私钥路径。\n\n3. 验证Ansible是否可以与所有受控节点通信。可以使用以下命令：\n\n   ```\n   ansible all -m ping\n   ```\n\n   如果所有节点都响应pong，则表示成功。\n\n   注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。\n\n使用Ansible进行自动化运维：\n\n现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：\n\n1. 运行命令\n\n   ```\n   ansible all -a \"ls -l /var/log\"\n   ```\n\n   将在所有受控节点上运行命令“ls -l /var/log”。\n\n2. 复制文件\n\n   ```\n   ansible all -m copy -a \"src=/path/to/local/file dest=/path/to/remote/file\"\n   ```\n\n   将在所有受控节点上复制本地文件到远程目录。\n\n3. 安装软件包\n\n   ```\n   ansible all -m apt -a \"name=nginx state=present\"\n   ```\n\n   将在所有受控节点上安装Nginx软件包。\n\n以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。\n","slug":"ansible服务","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtj0g0t0000ips66bd708kz","content":"<p>安装Ansible和设置控制节点：</p>\n<ol>\n<li><p>在linux1上安装Ansible，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install ansible</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Ansible的主机清单文件。在控制节点上使用vim编辑文件&#x2F;etc&#x2F;ansible&#x2F;hosts，添加受控节点的IP地址或主机名。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[web_servers]</span><br><span class=\"line\">linux2 ansible_host=192.168.0.2</span><br><span class=\"line\">linux3 ansible_host=192.168.0.3</span><br><span class=\"line\">linux4 ansible_host=192.168.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">[database_servers]</span><br><span class=\"line\">linux5 ansible_host=192.168.0.5</span><br><span class=\"line\">linux6 ansible_host=192.168.0.6</span><br><span class=\"line\">linux7 ansible_host=192.168.0.7</span><br><span class=\"line\"></span><br><span class=\"line\">[all:vars]</span><br><span class=\"line\">ansible_user=your_user_name</span><br><span class=\"line\">ansible_ssh_private_key_file=/path/to/your/private/key</span><br></pre></td></tr></table></figure>\n\n<p>注意：将your_user_name和&#x2F;path&#x2F;to&#x2F;your&#x2F;private&#x2F;key替换为实际的用户名和私钥路径。</p>\n</li>\n<li><p>验证Ansible是否可以与所有受控节点通信。可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping</span><br></pre></td></tr></table></figure>\n\n<p>如果所有节点都响应pong，则表示成功。</p>\n<p>注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。</p>\n</li>\n</ol>\n<p>使用Ansible进行自动化运维：</p>\n<p>现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：</p>\n<ol>\n<li><p>运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -a &quot;ls -l /var/log&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上运行命令“ls -l &#x2F;var&#x2F;log”。</p>\n</li>\n<li><p>复制文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/path/to/local/file dest=/path/to/remote/file&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上复制本地文件到远程目录。</p>\n</li>\n<li><p>安装软件包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m apt -a &quot;name=nginx state=present&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上安装Nginx软件包。</p>\n</li>\n</ol>\n<p>以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。</p>\n","site":{"data":{}},"cover":false,"abbrlink":1001,"excerpt":"","more":"<p>安装Ansible和设置控制节点：</p>\n<ol>\n<li><p>在linux1上安装Ansible，可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install ansible</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置Ansible的主机清单文件。在控制节点上使用vim编辑文件&#x2F;etc&#x2F;ansible&#x2F;hosts，添加受控节点的IP地址或主机名。例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[web_servers]</span><br><span class=\"line\">linux2 ansible_host=192.168.0.2</span><br><span class=\"line\">linux3 ansible_host=192.168.0.3</span><br><span class=\"line\">linux4 ansible_host=192.168.0.4</span><br><span class=\"line\"></span><br><span class=\"line\">[database_servers]</span><br><span class=\"line\">linux5 ansible_host=192.168.0.5</span><br><span class=\"line\">linux6 ansible_host=192.168.0.6</span><br><span class=\"line\">linux7 ansible_host=192.168.0.7</span><br><span class=\"line\"></span><br><span class=\"line\">[all:vars]</span><br><span class=\"line\">ansible_user=your_user_name</span><br><span class=\"line\">ansible_ssh_private_key_file=/path/to/your/private/key</span><br></pre></td></tr></table></figure>\n\n<p>注意：将your_user_name和&#x2F;path&#x2F;to&#x2F;your&#x2F;private&#x2F;key替换为实际的用户名和私钥路径。</p>\n</li>\n<li><p>验证Ansible是否可以与所有受控节点通信。可以使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping</span><br></pre></td></tr></table></figure>\n\n<p>如果所有节点都响应pong，则表示成功。</p>\n<p>注意：如果您使用的是不同的SSH端口号，可以在清单文件中使用ansible_ssh_port变量指定端口号。</p>\n</li>\n</ol>\n<p>使用Ansible进行自动化运维：</p>\n<p>现在您已经设置好了Ansible控制节点和受控节点，可以开始使用Ansible进行自动化运维任务。以下是一些例子：</p>\n<ol>\n<li><p>运行命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -a &quot;ls -l /var/log&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上运行命令“ls -l &#x2F;var&#x2F;log”。</p>\n</li>\n<li><p>复制文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m copy -a &quot;src=/path/to/local/file dest=/path/to/remote/file&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上复制本地文件到远程目录。</p>\n</li>\n<li><p>安装软件包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m apt -a &quot;name=nginx state=present&quot;</span><br></pre></td></tr></table></figure>\n\n<p>将在所有受控节点上安装Nginx软件包。</p>\n</li>\n</ol>\n<p>以上只是一些简单的例子，Ansible可以完成更复杂的任务，包括配置管理、自动化部署、容器编排等等。建议您参考官方文档学习更多操作。</p>\n"},{"title":"apache2服务器","date":"2023-04-21T16:15:52.000Z","_content":"\ntitle: 安装Apache2服务器\nauthor: John Doe\ndate: 2022-01-11 21:06:21\ntags:\n---\nWelcome to [Avrilzion blog](https://avrilzion.github.io/ifyblog)! This is your very first post.\n\n1. 安装Apache2服务器\n\n使用以下命令在Linux1上安装Apache2服务器：\n\n```\nsudo apt update\nsudo apt install apache2\n```\n\n2. 配置Apache2服务器\n\n打开Apache2的配置文件`/etc/apache2/sites-available/000-default.conf`，在`<VirtualHost *:80>`标签内添加以下内容：\n\n```\nServerName www.skills.lan\nServerAlias any.skills.lan\nRedirectMatch ^/(.*)$ https://www.skills.lan/$1\n```\n\n该配置将任何使用`skills.lan`或`any.skills.lan`访问的请求自动重定向到`www.skills.lan`。\n\n接着，打开Apache2的默认配置文件`/etc/apache2/sites-available/default-ssl.conf`，修改以下内容：\n\n```\nSSLCertificateFile /etc/ssl/apache.crt\nSSLCertificateKeyFile /etc/ssl/apache.key\n```\n\n并添加以下内容：\n\n```\nSSLEngine on\nSSLVerifyClient require\nSSLVerifyDepth 10\nSSLCACertificateFile /etc/ssl/ca.crt\n```\n\n这将启用SSL，要求客户端提供证书，并使用`/etc/ssl/ca.crt`中的证书作为可信CA证书。\n\n最后，将`/var/www/html/index.html`文件替换为以下内容：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>apache</title>\n</head>\n<body>\n\t<h1>Welcome to Apache!</h1>\n</body>\n</html>\n```\n\n3. 生成证书文件\n\n使用以下命令将`/etc/ssl/skills.crt`和`/etc/ssl/skills.key`转换为`/etc/ssl/skills.pfx`：\n\n```\nopenssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt\n```\n\n接着，使用以下命令将`/etc/ssl/skills.pfx`转换为`/etc/ssl/skills.pem`：\n\n```\nopenssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes\n```\n\n最后，使用以下命令从`/etc/ssl/skills.pem`提取证书和私钥，并分别保存到`/etc/ssl/apache.crt`和`/etc/ssl/apache.key`：\n\n```\nopenssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt\nopenssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key\n```\n\n4. 重启Apache2服务\n\n使用以下命令重启Apache2服务：\n\n```\nsudo service apache2 restart\n```\n\n现在，当使用`skills.lan`或`any.skills.lan`访问Linux1时，请求将自动重定向到`www.skills.lan`，且要求客户端提供SSL证书。\n","source":"_posts/apache2服务器.md","raw":"---\ntitle: apache2服务器\ndate: 2023-04-22 00:15:52\ntags:\n---\n\ntitle: 安装Apache2服务器\nauthor: John Doe\ndate: 2022-01-11 21:06:21\ntags:\n---\nWelcome to [Avrilzion blog](https://avrilzion.github.io/ifyblog)! This is your very first post.\n\n1. 安装Apache2服务器\n\n使用以下命令在Linux1上安装Apache2服务器：\n\n```\nsudo apt update\nsudo apt install apache2\n```\n\n2. 配置Apache2服务器\n\n打开Apache2的配置文件`/etc/apache2/sites-available/000-default.conf`，在`<VirtualHost *:80>`标签内添加以下内容：\n\n```\nServerName www.skills.lan\nServerAlias any.skills.lan\nRedirectMatch ^/(.*)$ https://www.skills.lan/$1\n```\n\n该配置将任何使用`skills.lan`或`any.skills.lan`访问的请求自动重定向到`www.skills.lan`。\n\n接着，打开Apache2的默认配置文件`/etc/apache2/sites-available/default-ssl.conf`，修改以下内容：\n\n```\nSSLCertificateFile /etc/ssl/apache.crt\nSSLCertificateKeyFile /etc/ssl/apache.key\n```\n\n并添加以下内容：\n\n```\nSSLEngine on\nSSLVerifyClient require\nSSLVerifyDepth 10\nSSLCACertificateFile /etc/ssl/ca.crt\n```\n\n这将启用SSL，要求客户端提供证书，并使用`/etc/ssl/ca.crt`中的证书作为可信CA证书。\n\n最后，将`/var/www/html/index.html`文件替换为以下内容：\n\n```\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>apache</title>\n</head>\n<body>\n\t<h1>Welcome to Apache!</h1>\n</body>\n</html>\n```\n\n3. 生成证书文件\n\n使用以下命令将`/etc/ssl/skills.crt`和`/etc/ssl/skills.key`转换为`/etc/ssl/skills.pfx`：\n\n```\nopenssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt\n```\n\n接着，使用以下命令将`/etc/ssl/skills.pfx`转换为`/etc/ssl/skills.pem`：\n\n```\nopenssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes\n```\n\n最后，使用以下命令从`/etc/ssl/skills.pem`提取证书和私钥，并分别保存到`/etc/ssl/apache.crt`和`/etc/ssl/apache.key`：\n\n```\nopenssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt\nopenssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key\n```\n\n4. 重启Apache2服务\n\n使用以下命令重启Apache2服务：\n\n```\nsudo service apache2 restart\n```\n\n现在，当使用`skills.lan`或`any.skills.lan`访问Linux1时，请求将自动重定向到`www.skills.lan`，且要求客户端提供SSL证书。\n","slug":"apache2服务器","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtj0g1x0001ips68ju401p0","content":"<h2 id=\"title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\"><a href=\"#title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\" class=\"headerlink\" title=\"title: 安装Apache2服务器author: John Doedate: 2022-01-11 21:06:21tags:\"></a>title: 安装Apache2服务器<br>author: John Doe<br>date: 2022-01-11 21:06:21<br>tags:</h2><p>Welcome to <a href=\"https://avrilzion.github.io/ifyblog\">Avrilzion blog</a>! This is your very first post.</p>\n<ol>\n<li>安装Apache2服务器</li>\n</ol>\n<p>使用以下命令在Linux1上安装Apache2服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置Apache2服务器</li>\n</ol>\n<p>打开Apache2的配置文件<code>/etc/apache2/sites-available/000-default.conf</code>，在<code>&lt;VirtualHost *:80&gt;</code>标签内添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName www.skills.lan</span><br><span class=\"line\">ServerAlias any.skills.lan</span><br><span class=\"line\">RedirectMatch ^/(.*)$ https://www.skills.lan/$1</span><br></pre></td></tr></table></figure>\n\n<p>该配置将任何使用<code>skills.lan</code>或<code>any.skills.lan</code>访问的请求自动重定向到<code>www.skills.lan</code>。</p>\n<p>接着，打开Apache2的默认配置文件<code>/etc/apache2/sites-available/default-ssl.conf</code>，修改以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/apache.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<p>并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLVerifyClient require</span><br><span class=\"line\">SSLVerifyDepth 10</span><br><span class=\"line\">SSLCACertificateFile /etc/ssl/ca.crt</span><br></pre></td></tr></table></figure>\n\n<p>这将启用SSL，要求客户端提供证书，并使用<code>/etc/ssl/ca.crt</code>中的证书作为可信CA证书。</p>\n<p>最后，将<code>/var/www/html/index.html</code>文件替换为以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;apache&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;Welcome to Apache!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成证书文件</li>\n</ol>\n<p>使用以下命令将<code>/etc/ssl/skills.crt</code>和<code>/etc/ssl/skills.key</code>转换为<code>/etc/ssl/skills.pfx</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt</span><br></pre></td></tr></table></figure>\n\n<p>接着，使用以下命令将<code>/etc/ssl/skills.pfx</code>转换为<code>/etc/ssl/skills.pem</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes</span><br></pre></td></tr></table></figure>\n\n<p>最后，使用以下命令从<code>/etc/ssl/skills.pem</code>提取证书和私钥，并分别保存到<code>/etc/ssl/apache.crt</code>和<code>/etc/ssl/apache.key</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt</span><br><span class=\"line\">openssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启Apache2服务</li>\n</ol>\n<p>使用以下命令重启Apache2服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当使用<code>skills.lan</code>或<code>any.skills.lan</code>访问Linux1时，请求将自动重定向到<code>www.skills.lan</code>，且要求客户端提供SSL证书。</p>\n","site":{"data":{}},"cover":false,"abbrlink":1002,"excerpt":"","more":"<h2 id=\"title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\"><a href=\"#title-安装Apache2服务器author-John-Doedate-2022-01-11-21-06-21tags\" class=\"headerlink\" title=\"title: 安装Apache2服务器author: John Doedate: 2022-01-11 21:06:21tags:\"></a>title: 安装Apache2服务器<br>author: John Doe<br>date: 2022-01-11 21:06:21<br>tags:</h2><p>Welcome to <a href=\"https://avrilzion.github.io/ifyblog\">Avrilzion blog</a>! This is your very first post.</p>\n<ol>\n<li>安装Apache2服务器</li>\n</ol>\n<p>使用以下命令在Linux1上安装Apache2服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install apache2</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>配置Apache2服务器</li>\n</ol>\n<p>打开Apache2的配置文件<code>/etc/apache2/sites-available/000-default.conf</code>，在<code>&lt;VirtualHost *:80&gt;</code>标签内添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServerName www.skills.lan</span><br><span class=\"line\">ServerAlias any.skills.lan</span><br><span class=\"line\">RedirectMatch ^/(.*)$ https://www.skills.lan/$1</span><br></pre></td></tr></table></figure>\n\n<p>该配置将任何使用<code>skills.lan</code>或<code>any.skills.lan</code>访问的请求自动重定向到<code>www.skills.lan</code>。</p>\n<p>接着，打开Apache2的默认配置文件<code>/etc/apache2/sites-available/default-ssl.conf</code>，修改以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/apache.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<p>并添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLVerifyClient require</span><br><span class=\"line\">SSLVerifyDepth 10</span><br><span class=\"line\">SSLCACertificateFile /etc/ssl/ca.crt</span><br></pre></td></tr></table></figure>\n\n<p>这将启用SSL，要求客户端提供证书，并使用<code>/etc/ssl/ca.crt</code>中的证书作为可信CA证书。</p>\n<p>最后，将<code>/var/www/html/index.html</code>文件替换为以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;apache&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;Welcome to Apache!&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>生成证书文件</li>\n</ol>\n<p>使用以下命令将<code>/etc/ssl/skills.crt</code>和<code>/etc/ssl/skills.key</code>转换为<code>/etc/ssl/skills.pfx</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -export -out /etc/ssl/skills.pfx -inkey /etc/ssl/skills.key -in /etc/ssl/skills.crt</span><br></pre></td></tr></table></figure>\n\n<p>接着，使用以下命令将<code>/etc/ssl/skills.pfx</code>转换为<code>/etc/ssl/skills.pem</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl pkcs12 -in /etc/ssl/skills.pfx -out /etc/ssl/skills.pem -nodes</span><br></pre></td></tr></table></figure>\n\n<p>最后，使用以下命令从<code>/etc/ssl/skills.pem</code>提取证书和私钥，并分别保存到<code>/etc/ssl/apache.crt</code>和<code>/etc/ssl/apache.key</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -in /etc/ssl/skills.pem -out /etc/ssl/apache.crt</span><br><span class=\"line\">openssl rsa -in /etc/ssl/skills.pem -out /etc/ssl/apache.key</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>重启Apache2服务</li>\n</ol>\n<p>使用以下命令重启Apache2服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当使用<code>skills.lan</code>或<code>any.skills.lan</code>访问Linux1时，请求将自动重定向到<code>www.skills.lan</code>，且要求客户端提供SSL证书。</p>\n"},{"title":"dns服务","date":"2023-04-21T15:32:43.000Z","_content":"\n\n\n### 2. DNS服务\n\n#### 2.1 防火墙设置\n\n在Ubuntu下，可以使用 `ufw` 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。\n\n```\nsudo ufw enable\nsudo ufw default deny incoming\n```\n\n然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：\n\n```\nsudo ufw allow 53/tcp\nsudo ufw allow 53/udp\n```\n\n#### 2.2 NTP服务设置\n\n使用 `chrony` 工具来配置NTP服务。首先，在linux1上安装 `chrony`：\n\n```\nsudo apt-get install chrony\n```\n\n然后，在 `/etc/chrony/chrony.conf` 文件中添加以下内容：\n\n```\nallow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务\n```\n\n最后，启动 `chrony` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start chrony\nsudo systemctl enable chrony\n```\n\n#### 2.3 SSH认证设置\n\n为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：\n\n```\nssh-keygen -t rsa\n```\n\n然后，在每个主机上将公钥添加到授权文件中：\n\n```\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n接下来，我们需要修改SSH配置文件 `/etc/ssh/sshd_config` ，禁用密码认证。找到以下两个配置项，并将其值改为 `no`：\n\n```\nPasswordAuthentication no\nChallengeResponseAuthentication no\n```\n\n最后，重启 SSH 服务：\n\n```\nsudo systemctl restart sshd\n```\n\n#### 2.4 DNS设置\n\n首先，在linux1上安装 `bind`：\n\n```\nsudo apt-get install bind9\n```\n\n然后，在 `/etc/bind/named.conf.options` 文件中配置 DNS 服务器：\n\n```\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8; # Google DNS\n        8.8.4.4;\n    };\n};\n\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"0.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192\";\n    allow-update { none; };\n};\n```\n\n这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：`skills.lan` 和 `0.168.192.in-addr.arpa`（这是内部网络的反向解析区域）。这些区域的信息将存储在 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192` 文件中。\n\n现在，我们需要创建这些区域文件。\n首先，创建`/etc/bind/db.skills.lan` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN A    192.168.0.1\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了 `skills.lan` 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。\n\n然后，创建 `/etc/bind/db.192` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN PTR  skills.lan.\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。\n\n最后，启动 `bind` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start bind9\nsudo systemctl enable bind9\n```\n\n然后，在linux2上也安装 `bind`，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 `/etc/bind/named.conf.options` 中的 `forwarders` 改为：\n\n```\nforwarders {\n    192.168.0.1; # 主DNS服务器\n};\n```\n\n#### 2.5 CA证书设置\n\n首先，在linux1上安装 `easy-rsa` 工具：\n\n```\nsudo apt-get install easy-rsa\n```\n\n然后，使用 `easy-rsa` 工具初始化 CA（证书颁发机构）：\n\n```\ncd /usr/share/easy-rsa\nsudo ./easyrsa init-pki\n```\n\n接下来，生成 CA 证书和私钥：\n\n```\nsudo ./easyrsa build-ca\n```\n\n在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。\n\n然后，创建服务器证书签名请求（CSR）：\n\n```\nsudo ./easyrsa gen-req server nopass\n```\n\n这个命令将生成一个名为 `server.req` 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 `skills.lan`。\n\n接下来，使用 CA签名服务器证书：\n\n```\nsudo ./easyrsa sign-req server server\n```\n\n这个命令将使用 CA 的私钥对 `server.req` 文件进行签名，生成一个名为 `server.crt` 的服务器证书文件。\n\n然后，将证书和私钥文件复制到 `/etc/ssl` 目录：\n\n```\nsudo cp pki/issued/server.crt /etc/ssl/certs/\nsudo cp pki/private/server.key /etc/ssl/private/\n```\n\n接下来，在 Apache2 中启用 SSL 模块：\n\n```\nsudo a2enmod ssl\n```\n\n然后，编辑 `/etc/apache2/sites-available/default-ssl.conf` 文件，配置 SSL 证书和私钥文件的路径：\n\n```\nSSLCertificateFile /etc/ssl/certs/server.crt\nSSLCertificateKeyFile /etc/ssl/private/server.key\n```\n\n然后，启用 SSL 站点：\n\n```\nsudo a2ensite default-ssl.conf\n```\n\n最后，重启 Apache2 服务：\n\n```\nsudo systemctl restart apache2\n```\n\n现在，访问 `https://linux1.skills.lan` 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 `/etc/ssl` 目录即可。\n\n(4) 配置 DNS 服务器\n\n接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。\n\n首先，在 `linux1` 上安装 BIND9：\n\n```\nsudo apt-get update\nsudo apt-get install bind9 bind9utils bind9-doc\n```\n\n然后，编辑 BIND9 配置文件 `/etc/bind/named.conf.local`，添加以下内容：\n\n```\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"1.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192.168.1\";\n    allow-update { none; };\n};\n```\n\n这段配置文件指定了 BIND9 的两个 DNS 区域：`skills.lan` 和 `1.168.192.in-addr.arpa`。`skills.lan` 区域用于域名解析，`1.168.192.in-addr.arpa` 区域用于 IP 地址反向解析。\n\n然后，创建两个区域文件 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192.168.1`：\n\n- `/etc/bind/db.skills.lan` 文件内容：\n\n```\n;\n; BIND data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n@       IN      A       192.168.1.101\nlinux1  IN      A       192.168.1.101\nlinux2  IN      A       192.168.1.102\n```\n\n- `/etc/bind/db.192.168.1` 文件内容：\n\n```\n;\n; BIND reverse data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n101     IN      PTR     linux1.skills.lan.\n102     IN      PTR     linux2.skills.lan.\n```\n\n这两个文件分别定义了 `skills.lan` 区域和 `1.168.192.in-addr.arpa` 区域的记录。\n\n最后，重启 BIND9 服务：\n\n```\nsudo systemctl restart bind9\n```\n\n现在，所有 Linux 主机都可以通过 `linux1` 和 `linux2` 进行 DNS 解析和反向解析了。如果 `linux1` 挂了，`linux2` 会自动接管 DNS 服务。\n\n(5) 配置 CA 服务器和证书\n\n最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。\n\n首先，在 `linux1` 上安装 OpenSSL：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\n```\n\n然后，生成 CA 证书和私钥：\n\n```\ncd /etc/ssl\nsudo mkdir CA\ncd CA\nsudo mkdir certs crl newcerts private\nsudo chmod 700 private\nsudo touch index.txt\necho 1000 > serial\nsudo openssl genrsa -aes256 -out private/ca.key.pem 4096\nsudo chmod 400 private/ca.key.pem\nsudo openssl req -config /etc/ssl/openssl.cnf \\\n    -key private/ca.key.pem \\\n    -new -x509 -days 3650 -sha256 -extensions v3_ca \\\n    -out certs/ca.cert.pem\nsudo chmod 444 certs/ca.cert.pem\n```\n\n这段命令生成了一个名为 `ca.key.pem` 的私钥和一个名为 `ca.cert.pem` 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。\n\n```\nsudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/\nsudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/\n```\n\n这里的 `user` 是你在 `linux2` 主机上的用户名。\n\n然后，在 `linux2` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建证书签名请求。\n\n接下来，在 `linux2` 上生成一个证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的证书。\n\n最后，将 `skills.cert.pem` 和 `skills.key` 文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录：\n\n```\nsudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/\nsudo scp user@linux1:/tmp/skills.key /etc/ssl/\nsudo chmod 644 /etc/ssl/skills.cert.pem\nsudo chmod 400 /etc/ssl/skills.key\n```\n\n现在，`linux1` 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。\n\n首先，在 `linux1` 上安装 Apache2：\n\n```\nsudo apt-get update\nsudo apt-get install apache2\n```\n\n然后，在 `linux1` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建服务器证书签名请求。\n\n接下来，在 `linux1` 上生成一个服务器证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的服务器证书。\n\n接下来，为 Apache2 配置 SSL：\n\n```\nsudo a2enmod ssl\nsudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf\nsudo vi /etc/apache2/sites-available/skills-ssl.conf\n```\n\n这个命令将复制默认的 SSL 配置文件，并将其重命名为 `skills-ssl.conf`。然后使用 vi 编辑器打开 `skills-ssl.conf` 文件，将以下内容添加到文件的末尾：\n\n```\nSSLEngine on\nSSLCertificateFile /etc/ssl/skills.cert.pem\nSSLCertificateKeyFile /etc/ssl/skills.key\n```\n\n保存并关闭文件。\n\n接下来，启用 `skills-ssl.conf` 配置文件：\n\n```\nsudo a2ensite skills-ssl.conf\n```\n\n然后重新启动 Apache2：\n\n```\nsudo service apache2 restart\n```\n\n现在，当用户访问 `https://skills.lan` 时，Apache2 将使用 `skills.cert.pem` 和 `skills.key` 文件提供 HTTPS 服务。并且，因为我们已经在 `linux1` 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。\n\n最后，让我们在其他 Linux 主机上测试 HTTPS 站点。\n\n首先，让我们在 `linux2` 上测试 HTTPS 站点：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux1:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux1` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 HTTPS 站点已成功配置。\n\n接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 `192.168.1.100`，请使用浏览器访问 `https://skills.lan`。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：\n\n![Firefox security warning](https://i.imgur.com/3Edd6wh.png)\n\n这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 \"Advanced...\"，然后单击 \"Accept the Risk and Continue\"，即可访问 HTTPS 站点。\n\n如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。\n\n至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n\n最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录。我们已经为 `linux1` 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 `linux2` 上。\n\n假设您已经在 `linux1` 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 `linux2` 上：\n\n```\nsudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/\n```\n\n这个命令将 `linux1` 上的 `/etc/ssl/skills.crt` 和 `/etc/ssl/skills.key` 文件复制到 `linux2` 上的 `/etc/ssl/` 目录中。\n\n现在，我们已经在 `linux2` 上复制了证书和私钥文件，让我们使用以下命令验证 `linux2` 上的 HTTPS 服务器是否工作正常：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux2:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux2` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 `linux2` 上的 HTTPS 站点已成功配置。\n\n至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n","source":"_posts/dns服务.md","raw":"---\ntitle: dns服务\ndate: 2023-04-21 23:32:43\ntags:\n---\n\n\n\n### 2. DNS服务\n\n#### 2.1 防火墙设置\n\n在Ubuntu下，可以使用 `ufw` 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。\n\n```\nsudo ufw enable\nsudo ufw default deny incoming\n```\n\n然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：\n\n```\nsudo ufw allow 53/tcp\nsudo ufw allow 53/udp\n```\n\n#### 2.2 NTP服务设置\n\n使用 `chrony` 工具来配置NTP服务。首先，在linux1上安装 `chrony`：\n\n```\nsudo apt-get install chrony\n```\n\n然后，在 `/etc/chrony/chrony.conf` 文件中添加以下内容：\n\n```\nallow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务\n```\n\n最后，启动 `chrony` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start chrony\nsudo systemctl enable chrony\n```\n\n#### 2.3 SSH认证设置\n\n为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：\n\n```\nssh-keygen -t rsa\n```\n\n然后，在每个主机上将公钥添加到授权文件中：\n\n```\ncat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n```\n\n接下来，我们需要修改SSH配置文件 `/etc/ssh/sshd_config` ，禁用密码认证。找到以下两个配置项，并将其值改为 `no`：\n\n```\nPasswordAuthentication no\nChallengeResponseAuthentication no\n```\n\n最后，重启 SSH 服务：\n\n```\nsudo systemctl restart sshd\n```\n\n#### 2.4 DNS设置\n\n首先，在linux1上安装 `bind`：\n\n```\nsudo apt-get install bind9\n```\n\n然后，在 `/etc/bind/named.conf.options` 文件中配置 DNS 服务器：\n\n```\noptions {\n    directory \"/var/cache/bind\";\n    recursion yes;\n    allow-query { any; };\n    forwarders {\n        8.8.8.8; # Google DNS\n        8.8.4.4;\n    };\n};\n\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"0.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192\";\n    allow-update { none; };\n};\n```\n\n这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：`skills.lan` 和 `0.168.192.in-addr.arpa`（这是内部网络的反向解析区域）。这些区域的信息将存储在 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192` 文件中。\n\n现在，我们需要创建这些区域文件。\n首先，创建`/etc/bind/db.skills.lan` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN A    192.168.0.1\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了 `skills.lan` 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。\n\n然后，创建 `/etc/bind/db.192` 文件：\n\n```\n$TTL 3H\n@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (\n                1       ; Serial\n                3H      ; Refresh\n                15M     ; Retry\n                1W      ; Expire\n                1D      ; Minimum TTL\n)\n        IN NS   linux1.skills.lan.\n        IN PTR  skills.lan.\nlinux1  IN A    192.168.0.1\nlinux2  IN A    192.168.0.2\n```\n\n这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。\n\n最后，启动 `bind` 服务并将其设置为开机启动：\n\n```\nsudo systemctl start bind9\nsudo systemctl enable bind9\n```\n\n然后，在linux2上也安装 `bind`，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 `/etc/bind/named.conf.options` 中的 `forwarders` 改为：\n\n```\nforwarders {\n    192.168.0.1; # 主DNS服务器\n};\n```\n\n#### 2.5 CA证书设置\n\n首先，在linux1上安装 `easy-rsa` 工具：\n\n```\nsudo apt-get install easy-rsa\n```\n\n然后，使用 `easy-rsa` 工具初始化 CA（证书颁发机构）：\n\n```\ncd /usr/share/easy-rsa\nsudo ./easyrsa init-pki\n```\n\n接下来，生成 CA 证书和私钥：\n\n```\nsudo ./easyrsa build-ca\n```\n\n在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。\n\n然后，创建服务器证书签名请求（CSR）：\n\n```\nsudo ./easyrsa gen-req server nopass\n```\n\n这个命令将生成一个名为 `server.req` 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 `skills.lan`。\n\n接下来，使用 CA签名服务器证书：\n\n```\nsudo ./easyrsa sign-req server server\n```\n\n这个命令将使用 CA 的私钥对 `server.req` 文件进行签名，生成一个名为 `server.crt` 的服务器证书文件。\n\n然后，将证书和私钥文件复制到 `/etc/ssl` 目录：\n\n```\nsudo cp pki/issued/server.crt /etc/ssl/certs/\nsudo cp pki/private/server.key /etc/ssl/private/\n```\n\n接下来，在 Apache2 中启用 SSL 模块：\n\n```\nsudo a2enmod ssl\n```\n\n然后，编辑 `/etc/apache2/sites-available/default-ssl.conf` 文件，配置 SSL 证书和私钥文件的路径：\n\n```\nSSLCertificateFile /etc/ssl/certs/server.crt\nSSLCertificateKeyFile /etc/ssl/private/server.key\n```\n\n然后，启用 SSL 站点：\n\n```\nsudo a2ensite default-ssl.conf\n```\n\n最后，重启 Apache2 服务：\n\n```\nsudo systemctl restart apache2\n```\n\n现在，访问 `https://linux1.skills.lan` 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 `/etc/ssl` 目录即可。\n\n(4) 配置 DNS 服务器\n\n接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。\n\n首先，在 `linux1` 上安装 BIND9：\n\n```\nsudo apt-get update\nsudo apt-get install bind9 bind9utils bind9-doc\n```\n\n然后，编辑 BIND9 配置文件 `/etc/bind/named.conf.local`，添加以下内容：\n\n```\nzone \"skills.lan\" IN {\n    type master;\n    file \"/etc/bind/db.skills.lan\";\n    allow-update { none; };\n};\n\nzone \"1.168.192.in-addr.arpa\" IN {\n    type master;\n    file \"/etc/bind/db.192.168.1\";\n    allow-update { none; };\n};\n```\n\n这段配置文件指定了 BIND9 的两个 DNS 区域：`skills.lan` 和 `1.168.192.in-addr.arpa`。`skills.lan` 区域用于域名解析，`1.168.192.in-addr.arpa` 区域用于 IP 地址反向解析。\n\n然后，创建两个区域文件 `/etc/bind/db.skills.lan` 和 `/etc/bind/db.192.168.1`：\n\n- `/etc/bind/db.skills.lan` 文件内容：\n\n```\n;\n; BIND data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n@       IN      A       192.168.1.101\nlinux1  IN      A       192.168.1.101\nlinux2  IN      A       192.168.1.102\n```\n\n- `/etc/bind/db.192.168.1` 文件内容：\n\n```\n;\n; BIND reverse data file for local loopback interface\n;\n$TTL    604800\n@       IN      SOA     linux1.skills.lan. admin.skills.lan. (\n                     2023042001         ; Serial\n                         604800         ; Refresh\n                          86400         ; Retry\n                        2419200         ; Expire\n                         604800 )       ; Negative Cache TTL\n;\n@       IN      NS      linux1.skills.lan.\n101     IN      PTR     linux1.skills.lan.\n102     IN      PTR     linux2.skills.lan.\n```\n\n这两个文件分别定义了 `skills.lan` 区域和 `1.168.192.in-addr.arpa` 区域的记录。\n\n最后，重启 BIND9 服务：\n\n```\nsudo systemctl restart bind9\n```\n\n现在，所有 Linux 主机都可以通过 `linux1` 和 `linux2` 进行 DNS 解析和反向解析了。如果 `linux1` 挂了，`linux2` 会自动接管 DNS 服务。\n\n(5) 配置 CA 服务器和证书\n\n最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。\n\n首先，在 `linux1` 上安装 OpenSSL：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\n```\n\n然后，生成 CA 证书和私钥：\n\n```\ncd /etc/ssl\nsudo mkdir CA\ncd CA\nsudo mkdir certs crl newcerts private\nsudo chmod 700 private\nsudo touch index.txt\necho 1000 > serial\nsudo openssl genrsa -aes256 -out private/ca.key.pem 4096\nsudo chmod 400 private/ca.key.pem\nsudo openssl req -config /etc/ssl/openssl.cnf \\\n    -key private/ca.key.pem \\\n    -new -x509 -days 3650 -sha256 -extensions v3_ca \\\n    -out certs/ca.cert.pem\nsudo chmod 444 certs/ca.cert.pem\n```\n\n这段命令生成了一个名为 `ca.key.pem` 的私钥和一个名为 `ca.cert.pem` 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。\n\n```\nsudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/\nsudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/\n```\n\n这里的 `user` 是你在 `linux2` 主机上的用户名。\n\n然后，在 `linux2` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建证书签名请求。\n\n接下来，在 `linux2` 上生成一个证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的证书。\n\n最后，将 `skills.cert.pem` 和 `skills.key` 文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录：\n\n```\nsudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/\nsudo scp user@linux1:/tmp/skills.key /etc/ssl/\nsudo chmod 644 /etc/ssl/skills.cert.pem\nsudo chmod 400 /etc/ssl/skills.key\n```\n\n现在，`linux1` 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。\n\n首先，在 `linux1` 上安装 Apache2：\n\n```\nsudo apt-get update\nsudo apt-get install apache2\n```\n\n然后，在 `linux1` 上创建一个名为 `skills.lan.cnf` 的配置文件：\n\n```\n[req]\ndefault_bits = 2048\nprompt = no\ndefault_md = sha256\ndistinguished_name = dn\n\n[dn]\nC = CN\nST = Beijing\nL = Beijing\nO = skills\nOU = system\nCN = skills.lan\n```\n\n这个配置文件用于创建服务器证书签名请求。\n\n接下来，在 `linux1` 上生成一个服务器证书签名请求：\n\n```\nsudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr\n```\n\n这个命令将生成一个名为 `skills.key` 的私钥和一个名为 `skills.csr` 的证书签名请求。\n\n然后，将 `skills.csr` 文件复制到 `linux1` 上，并使用 `ca.cert.pem` 和 `ca.key.pem` 为证书签名请求签名：\n\n```\nsudo scp skills.csr user@linux1:/tmp/\nsudo ssh user@linux1 \"sudo openssl ca -config /etc/ssl/openssl.cnf \\\n    -extensions server_cert -days 1825 -notext -md sha256 \\\n    -in /tmp/skills.csr \\\n    -out /tmp/skills.cert.pem \\\n    -batch\"\n```\n\n这个命令使用 `ca.cert.pem` 和 `ca.key.pem` 签署了 `skills.csr`，并生成了名为 `skills.cert.pem` 的服务器证书。\n\n接下来，为 Apache2 配置 SSL：\n\n```\nsudo a2enmod ssl\nsudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf\nsudo vi /etc/apache2/sites-available/skills-ssl.conf\n```\n\n这个命令将复制默认的 SSL 配置文件，并将其重命名为 `skills-ssl.conf`。然后使用 vi 编辑器打开 `skills-ssl.conf` 文件，将以下内容添加到文件的末尾：\n\n```\nSSLEngine on\nSSLCertificateFile /etc/ssl/skills.cert.pem\nSSLCertificateKeyFile /etc/ssl/skills.key\n```\n\n保存并关闭文件。\n\n接下来，启用 `skills-ssl.conf` 配置文件：\n\n```\nsudo a2ensite skills-ssl.conf\n```\n\n然后重新启动 Apache2：\n\n```\nsudo service apache2 restart\n```\n\n现在，当用户访问 `https://skills.lan` 时，Apache2 将使用 `skills.cert.pem` 和 `skills.key` 文件提供 HTTPS 服务。并且，因为我们已经在 `linux1` 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。\n\n最后，让我们在其他 Linux 主机上测试 HTTPS 站点。\n\n首先，让我们在 `linux2` 上测试 HTTPS 站点：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux1:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux1` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 HTTPS 站点已成功配置。\n\n接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 `192.168.1.100`，请使用浏览器访问 `https://skills.lan`。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：\n\n![Firefox security warning](https://i.imgur.com/3Edd6wh.png)\n\n这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 \"Advanced...\"，然后单击 \"Accept the Risk and Continue\"，即可访问 HTTPS 站点。\n\n如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。\n\n至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n\n最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 `/etc/ssl` 目录。我们已经为 `linux1` 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 `linux2` 上。\n\n假设您已经在 `linux1` 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 `linux2` 上：\n\n```\nsudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/\n```\n\n这个命令将 `linux1` 上的 `/etc/ssl/skills.crt` 和 `/etc/ssl/skills.key` 文件复制到 `linux2` 上的 `/etc/ssl/` 目录中。\n\n现在，我们已经在 `linux2` 上复制了证书和私钥文件，让我们使用以下命令验证 `linux2` 上的 HTTPS 服务器是否工作正常：\n\n```\nsudo apt-get update\nsudo apt-get install openssl\nopenssl s_client -connect linux2:443\n```\n\n这个命令将使用 OpenSSL 的 `s_client` 工具连接到 `linux2` 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：\n\n```\nCONNECTED(00000003)\ndepth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\ndepth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\nverify return:1\n---\nCertificate chain\n 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIID...<省略>...QT7H\n-----END CERTIFICATE-----\nsubject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\nissuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan\n\n---\nNo client certificate CA names sent\nPeer signing digest: SHA256\nPeer signature type: RSA-PSS\nServer Temp Key: X25519, 253 bits\n---\nSSL handshake has read 1077 bytes and written 481 bytes\nVerification: OK\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n---\n```\n\n如果您看到上面的输出，则表示 `linux2` 上的 HTTPS 站点已成功配置。\n\n至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。\n","slug":"dns服务","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtj0g2h0002ips64l0z7qld","content":"<h3 id=\"2-DNS服务\"><a href=\"#2-DNS服务\" class=\"headerlink\" title=\"2. DNS服务\"></a>2. DNS服务</h3><h4 id=\"2-1-防火墙设置\"><a href=\"#2-1-防火墙设置\" class=\"headerlink\" title=\"2.1 防火墙设置\"></a>2.1 防火墙设置</h4><p>在Ubuntu下，可以使用 <code>ufw</code> 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br><span class=\"line\">sudo ufw default deny incoming</span><br></pre></td></tr></table></figure>\n\n<p>然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 53/tcp</span><br><span class=\"line\">sudo ufw allow 53/udp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-NTP服务设置\"><a href=\"#2-2-NTP服务设置\" class=\"headerlink\" title=\"2.2 NTP服务设置\"></a>2.2 NTP服务设置</h4><p>使用 <code>chrony</code> 工具来配置NTP服务。首先，在linux1上安装 <code>chrony</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install chrony</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/chrony/chrony.conf</code> 文件中添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务</span><br></pre></td></tr></table></figure>\n\n<p>最后，启动 <code>chrony</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start chrony</span><br><span class=\"line\">sudo systemctl enable chrony</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-SSH认证设置\"><a href=\"#2-3-SSH认证设置\" class=\"headerlink\" title=\"2.3 SSH认证设置\"></a>2.3 SSH认证设置</h4><p>为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，在每个主机上将公钥添加到授权文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要修改SSH配置文件 <code>/etc/ssh/sshd_config</code> ，禁用密码认证。找到以下两个配置项，并将其值改为 <code>no</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">ChallengeResponseAuthentication no</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 SSH 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-DNS设置\"><a href=\"#2-4-DNS设置\" class=\"headerlink\" title=\"2.4 DNS设置\"></a>2.4 DNS设置</h4><p>首先，在linux1上安装 <code>bind</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/bind/named.conf.options</code> 文件中配置 DNS 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123;</span><br><span class=\"line\">    directory &quot;/var/cache/bind&quot;;</span><br><span class=\"line\">    recursion yes;</span><br><span class=\"line\">    allow-query &#123; any; &#125;;</span><br><span class=\"line\">    forwarders &#123;</span><br><span class=\"line\">        8.8.8.8; # Google DNS</span><br><span class=\"line\">        8.8.4.4;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;0.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：<code>skills.lan</code> 和 <code>0.168.192.in-addr.arpa</code>（这是内部网络的反向解析区域）。这些区域的信息将存储在 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192</code> 文件中。</p>\n<p>现在，我们需要创建这些区域文件。<br>首先，创建<code>/etc/bind/db.skills.lan</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN A    192.168.0.1</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了 <code>skills.lan</code> 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。</p>\n<p>然后，创建 <code>/etc/bind/db.192</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN PTR  skills.lan.</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。</p>\n<p>最后，启动 <code>bind</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start bind9</span><br><span class=\"line\">sudo systemctl enable bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在linux2上也安装 <code>bind</code>，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 <code>/etc/bind/named.conf.options</code> 中的 <code>forwarders</code> 改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forwarders &#123;</span><br><span class=\"line\">    192.168.0.1; # 主DNS服务器</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-CA证书设置\"><a href=\"#2-5-CA证书设置\" class=\"headerlink\" title=\"2.5 CA证书设置\"></a>2.5 CA证书设置</h4><p>首先，在linux1上安装 <code>easy-rsa</code> 工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install easy-rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，使用 <code>easy-rsa</code> 工具初始化 CA（证书颁发机构）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/share/easy-rsa</span><br><span class=\"line\">sudo ./easyrsa init-pki</span><br></pre></td></tr></table></figure>\n\n<p>接下来，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa build-ca</span><br></pre></td></tr></table></figure>\n\n<p>在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。</p>\n<p>然后，创建服务器证书签名请求（CSR）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa gen-req server nopass</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>server.req</code> 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 <code>skills.lan</code>。</p>\n<p>接下来，使用 CA签名服务器证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa sign-req server server</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 CA 的私钥对 <code>server.req</code> 文件进行签名，生成一个名为 <code>server.crt</code> 的服务器证书文件。</p>\n<p>然后，将证书和私钥文件复制到 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp pki/issued/server.crt /etc/ssl/certs/</span><br><span class=\"line\">sudo cp pki/private/server.key /etc/ssl/private/</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在 Apache2 中启用 SSL 模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 <code>/etc/apache2/sites-available/default-ssl.conf</code> 文件，配置 SSL 证书和私钥文件的路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/certs/server.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/private/server.key</span><br></pre></td></tr></table></figure>\n\n<p>然后，启用 SSL 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite default-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 Apache2 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<p>现在，访问 <code>https://linux1.skills.lan</code> 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 <code>/etc/ssl</code> 目录即可。</p>\n<p>(4) 配置 DNS 服务器</p>\n<p>接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 BIND9：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install bind9 bind9utils bind9-doc</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 BIND9 配置文件 <code>/etc/bind/named.conf.local</code>，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192.168.1&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这段配置文件指定了 BIND9 的两个 DNS 区域：<code>skills.lan</code> 和 <code>1.168.192.in-addr.arpa</code>。<code>skills.lan</code> 区域用于域名解析，<code>1.168.192.in-addr.arpa</code> 区域用于 IP 地址反向解析。</p>\n<p>然后，创建两个区域文件 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192.168.1</code>：</p>\n<ul>\n<li><code>/etc/bind/db.skills.lan</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">@       IN      A       192.168.1.101</span><br><span class=\"line\">linux1  IN      A       192.168.1.101</span><br><span class=\"line\">linux2  IN      A       192.168.1.102</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>/etc/bind/db.192.168.1</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND reverse data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">101     IN      PTR     linux1.skills.lan.</span><br><span class=\"line\">102     IN      PTR     linux2.skills.lan.</span><br></pre></td></tr></table></figure>\n\n<p>这两个文件分别定义了 <code>skills.lan</code> 区域和 <code>1.168.192.in-addr.arpa</code> 区域的记录。</p>\n<p>最后，重启 BIND9 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart bind9</span><br></pre></td></tr></table></figure>\n\n<p>现在，所有 Linux 主机都可以通过 <code>linux1</code> 和 <code>linux2</code> 进行 DNS 解析和反向解析了。如果 <code>linux1</code> 挂了，<code>linux2</code> 会自动接管 DNS 服务。</p>\n<p>(5) 配置 CA 服务器和证书</p>\n<p>最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 OpenSSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/ssl</span><br><span class=\"line\">sudo mkdir CA</span><br><span class=\"line\">cd CA</span><br><span class=\"line\">sudo mkdir certs crl newcerts private</span><br><span class=\"line\">sudo chmod 700 private</span><br><span class=\"line\">sudo touch index.txt</span><br><span class=\"line\">echo 1000 &gt; serial</span><br><span class=\"line\">sudo openssl genrsa -aes256 -out private/ca.key.pem 4096</span><br><span class=\"line\">sudo chmod 400 private/ca.key.pem</span><br><span class=\"line\">sudo openssl req -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -key private/ca.key.pem \\</span><br><span class=\"line\">    -new -x509 -days 3650 -sha256 -extensions v3_ca \\</span><br><span class=\"line\">    -out certs/ca.cert.pem</span><br><span class=\"line\">sudo chmod 444 certs/ca.cert.pem</span><br></pre></td></tr></table></figure>\n\n<p>这段命令生成了一个名为 <code>ca.key.pem</code> 的私钥和一个名为 <code>ca.cert.pem</code> 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/</span><br><span class=\"line\">sudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>user</code> 是你在 <code>linux2</code> 主机上的用户名。</p>\n<p>然后，在 <code>linux2</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建证书签名请求。</p>\n<p>接下来，在 <code>linux2</code> 上生成一个证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的证书。</p>\n<p>最后，将 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/</span><br><span class=\"line\">sudo scp user@linux1:/tmp/skills.key /etc/ssl/</span><br><span class=\"line\">sudo chmod 644 /etc/ssl/skills.cert.pem</span><br><span class=\"line\">sudo chmod 400 /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>现在，<code>linux1</code> 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。</p>\n<p>首先，在 <code>linux1</code> 上安装 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>linux1</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建服务器证书签名请求。</p>\n<p>接下来，在 <code>linux1</code> 上生成一个服务器证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的服务器证书。</p>\n<p>接下来，为 Apache2 配置 SSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br><span class=\"line\">sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf</span><br><span class=\"line\">sudo vi /etc/apache2/sites-available/skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将复制默认的 SSL 配置文件，并将其重命名为 <code>skills-ssl.conf</code>。然后使用 vi 编辑器打开 <code>skills-ssl.conf</code> 文件，将以下内容添加到文件的末尾：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLCertificateFile /etc/ssl/skills.cert.pem</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<p>接下来，启用 <code>skills-ssl.conf</code> 配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当用户访问 <code>https://skills.lan</code> 时，Apache2 将使用 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件提供 HTTPS 服务。并且，因为我们已经在 <code>linux1</code> 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。</p>\n<p>最后，让我们在其他 Linux 主机上测试 HTTPS 站点。</p>\n<p>首先，让我们在 <code>linux2</code> 上测试 HTTPS 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux1:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux1</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 HTTPS 站点已成功配置。</p>\n<p>接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 <code>192.168.1.100</code>，请使用浏览器访问 <code>https://skills.lan</code>。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：</p>\n<p><img src=\"https://i.imgur.com/3Edd6wh.png\" alt=\"Firefox security warning\"></p>\n<p>这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 “Advanced…”，然后单击 “Accept the Risk and Continue”，即可访问 HTTPS 站点。</p>\n<p>如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。</p>\n<p>至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n<p>最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录。我们已经为 <code>linux1</code> 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 <code>linux2</code> 上。</p>\n<p>假设您已经在 <code>linux1</code> 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 <code>linux2</code> 上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将 <code>linux1</code> 上的 <code>/etc/ssl/skills.crt</code> 和 <code>/etc/ssl/skills.key</code> 文件复制到 <code>linux2</code> 上的 <code>/etc/ssl/</code> 目录中。</p>\n<p>现在，我们已经在 <code>linux2</code> 上复制了证书和私钥文件，让我们使用以下命令验证 <code>linux2</code> 上的 HTTPS 服务器是否工作正常：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux2:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux2</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 <code>linux2</code> 上的 HTTPS 站点已成功配置。</p>\n<p>至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n","site":{"data":{}},"cover":false,"abbrlink":1002,"excerpt":"","more":"<h3 id=\"2-DNS服务\"><a href=\"#2-DNS服务\" class=\"headerlink\" title=\"2. DNS服务\"></a>2. DNS服务</h3><h4 id=\"2-1-防火墙设置\"><a href=\"#2-1-防火墙设置\" class=\"headerlink\" title=\"2.1 防火墙设置\"></a>2.1 防火墙设置</h4><p>在Ubuntu下，可以使用 <code>ufw</code> 工具来管理防火墙规则。首先，需要启用防火墙，并设置默认规则为拒绝所有入站流量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br><span class=\"line\">sudo ufw default deny incoming</span><br></pre></td></tr></table></figure>\n\n<p>然后，需要允许 DNS 服务的流量通过防火墙。假设 DNS 服务使用的端口为 53（默认情况下是这个端口），则可以使用以下命令来放行该端口：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 53/tcp</span><br><span class=\"line\">sudo ufw allow 53/udp</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-2-NTP服务设置\"><a href=\"#2-2-NTP服务设置\" class=\"headerlink\" title=\"2.2 NTP服务设置\"></a>2.2 NTP服务设置</h4><p>使用 <code>chrony</code> 工具来配置NTP服务。首先，在linux1上安装 <code>chrony</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install chrony</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/chrony/chrony.conf</code> 文件中添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allow 192.168.0.0/24  # 允许本地网络中的主机使用NTP服务</span><br></pre></td></tr></table></figure>\n\n<p>最后，启动 <code>chrony</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start chrony</span><br><span class=\"line\">sudo systemctl enable chrony</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-SSH认证设置\"><a href=\"#2-3-SSH认证设置\" class=\"headerlink\" title=\"2.3 SSH认证设置\"></a>2.3 SSH认证设置</h4><p>为了禁用密码认证，我们需要使用公钥认证。首先，在每个Linux主机上生成公私钥对：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，在每个主机上将公钥添加到授权文件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们需要修改SSH配置文件 <code>/etc/ssh/sshd_config</code> ，禁用密码认证。找到以下两个配置项，并将其值改为 <code>no</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PasswordAuthentication no</span><br><span class=\"line\">ChallengeResponseAuthentication no</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 SSH 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-DNS设置\"><a href=\"#2-4-DNS设置\" class=\"headerlink\" title=\"2.4 DNS设置\"></a>2.4 DNS设置</h4><p>首先，在linux1上安装 <code>bind</code>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>/etc/bind/named.conf.options</code> 文件中配置 DNS 服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">options &#123;</span><br><span class=\"line\">    directory &quot;/var/cache/bind&quot;;</span><br><span class=\"line\">    recursion yes;</span><br><span class=\"line\">    allow-query &#123; any; &#125;;</span><br><span class=\"line\">    forwarders &#123;</span><br><span class=\"line\">        8.8.8.8; # Google DNS</span><br><span class=\"line\">        8.8.4.4;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;0.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件中，我们允许任何主机进行 DNS 查询，同时将未知的 DNS 请求转发给 Google DNS 服务器。我们还配置了两个 DNS 区域：<code>skills.lan</code> 和 <code>0.168.192.in-addr.arpa</code>（这是内部网络的反向解析区域）。这些区域的信息将存储在 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192</code> 文件中。</p>\n<p>现在，我们需要创建这些区域文件。<br>首先，创建<code>/etc/bind/db.skills.lan</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN A    192.168.0.1</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了 <code>skills.lan</code> 区域的信息。第一行是 TTL（Time to Live），表示 DNS 记录在缓存中的时间。接下来的几行定义了区域的 SOA 记录和 NS 记录，以及三个主机的 A 记录。</p>\n<p>然后，创建 <code>/etc/bind/db.192</code> 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$TTL 3H</span><br><span class=\"line\">@       IN SOA  linux1.skills.lan. root.linux1.skills.lan. (</span><br><span class=\"line\">                1       ; Serial</span><br><span class=\"line\">                3H      ; Refresh</span><br><span class=\"line\">                15M     ; Retry</span><br><span class=\"line\">                1W      ; Expire</span><br><span class=\"line\">                1D      ; Minimum TTL</span><br><span class=\"line\">)</span><br><span class=\"line\">        IN NS   linux1.skills.lan.</span><br><span class=\"line\">        IN PTR  skills.lan.</span><br><span class=\"line\">linux1  IN A    192.168.0.1</span><br><span class=\"line\">linux2  IN A    192.168.0.2</span><br></pre></td></tr></table></figure>\n\n<p>这个文件中定义了内部网络的反向解析信息。第一行是 TTL，接下来的几行是 SOA 记录和 NS 记录，以及两个主机的 PTR（Pointer）记录，用于反向解析。</p>\n<p>最后，启动 <code>bind</code> 服务并将其设置为开机启动：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start bind9</span><br><span class=\"line\">sudo systemctl enable bind9</span><br></pre></td></tr></table></figure>\n\n<p>然后，在linux2上也安装 <code>bind</code>，并将其配置为备用 DNS 服务器。配置方法类似于linux1，只需要将 <code>/etc/bind/named.conf.options</code> 中的 <code>forwarders</code> 改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forwarders &#123;</span><br><span class=\"line\">    192.168.0.1; # 主DNS服务器</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-5-CA证书设置\"><a href=\"#2-5-CA证书设置\" class=\"headerlink\" title=\"2.5 CA证书设置\"></a>2.5 CA证书设置</h4><p>首先，在linux1上安装 <code>easy-rsa</code> 工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install easy-rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后，使用 <code>easy-rsa</code> 工具初始化 CA（证书颁发机构）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/share/easy-rsa</span><br><span class=\"line\">sudo ./easyrsa init-pki</span><br></pre></td></tr></table></figure>\n\n<p>接下来，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa build-ca</span><br></pre></td></tr></table></figure>\n\n<p>在生成证书和私钥时，需要输入一些信息，如国家、省份、城市、组织名称等。这些信息将出现在证书中。</p>\n<p>然后，创建服务器证书签名请求（CSR）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa gen-req server nopass</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>server.req</code> 的文件，其中包含服务器的公钥和一些其他信息。在生成 CSR 时，需要输入服务器的公共名称（Common Name），即 <code>skills.lan</code>。</p>\n<p>接下来，使用 CA签名服务器证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ./easyrsa sign-req server server</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 CA 的私钥对 <code>server.req</code> 文件进行签名，生成一个名为 <code>server.crt</code> 的服务器证书文件。</p>\n<p>然后，将证书和私钥文件复制到 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp pki/issued/server.crt /etc/ssl/certs/</span><br><span class=\"line\">sudo cp pki/private/server.key /etc/ssl/private/</span><br></pre></td></tr></table></figure>\n\n<p>接下来，在 Apache2 中启用 SSL 模块：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 <code>/etc/apache2/sites-available/default-ssl.conf</code> 文件，配置 SSL 证书和私钥文件的路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLCertificateFile /etc/ssl/certs/server.crt</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/private/server.key</span><br></pre></td></tr></table></figure>\n\n<p>然后，启用 SSL 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite default-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>最后，重启 Apache2 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n\n<p>现在，访问 <code>https://linux1.skills.lan</code> 就可以看到证书信息了，浏览器不会出现警告信息。如果需要为其他 Linux 服务器颁发证书，可以使用类似的方式生成 CSR、签名证书，然后将证书和私钥复制到对应服务器的 <code>/etc/ssl</code> 目录即可。</p>\n<p>(4) 配置 DNS 服务器</p>\n<p>接下来，我们要配置 DNS 服务器，为所有 Linux 主机提供冗余的 DNS 正反向解析服务。在这个例子中，我们将使用 BIND9 作为 DNS 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 BIND9：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install bind9 bind9utils bind9-doc</span><br></pre></td></tr></table></figure>\n\n<p>然后，编辑 BIND9 配置文件 <code>/etc/bind/named.conf.local</code>，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zone &quot;skills.lan&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.skills.lan&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">zone &quot;1.168.192.in-addr.arpa&quot; IN &#123;</span><br><span class=\"line\">    type master;</span><br><span class=\"line\">    file &quot;/etc/bind/db.192.168.1&quot;;</span><br><span class=\"line\">    allow-update &#123; none; &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这段配置文件指定了 BIND9 的两个 DNS 区域：<code>skills.lan</code> 和 <code>1.168.192.in-addr.arpa</code>。<code>skills.lan</code> 区域用于域名解析，<code>1.168.192.in-addr.arpa</code> 区域用于 IP 地址反向解析。</p>\n<p>然后，创建两个区域文件 <code>/etc/bind/db.skills.lan</code> 和 <code>/etc/bind/db.192.168.1</code>：</p>\n<ul>\n<li><code>/etc/bind/db.skills.lan</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">@       IN      A       192.168.1.101</span><br><span class=\"line\">linux1  IN      A       192.168.1.101</span><br><span class=\"line\">linux2  IN      A       192.168.1.102</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>/etc/bind/db.192.168.1</code> 文件内容：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;</span><br><span class=\"line\">; BIND reverse data file for local loopback interface</span><br><span class=\"line\">;</span><br><span class=\"line\">$TTL    604800</span><br><span class=\"line\">@       IN      SOA     linux1.skills.lan. admin.skills.lan. (</span><br><span class=\"line\">                     2023042001         ; Serial</span><br><span class=\"line\">                         604800         ; Refresh</span><br><span class=\"line\">                          86400         ; Retry</span><br><span class=\"line\">                        2419200         ; Expire</span><br><span class=\"line\">                         604800 )       ; Negative Cache TTL</span><br><span class=\"line\">;</span><br><span class=\"line\">@       IN      NS      linux1.skills.lan.</span><br><span class=\"line\">101     IN      PTR     linux1.skills.lan.</span><br><span class=\"line\">102     IN      PTR     linux2.skills.lan.</span><br></pre></td></tr></table></figure>\n\n<p>这两个文件分别定义了 <code>skills.lan</code> 区域和 <code>1.168.192.in-addr.arpa</code> 区域的记录。</p>\n<p>最后，重启 BIND9 服务：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart bind9</span><br></pre></td></tr></table></figure>\n\n<p>现在，所有 Linux 主机都可以通过 <code>linux1</code> 和 <code>linux2</code> 进行 DNS 解析和反向解析了。如果 <code>linux1</code> 挂了，<code>linux2</code> 会自动接管 DNS 服务。</p>\n<p>(5) 配置 CA 服务器和证书</p>\n<p>最后，我们要配置 CA 服务器，并为 Linux 主机颁发证书。在这个例子中，我们将使用OpenSSL 作为 CA 服务器软件。</p>\n<p>首先，在 <code>linux1</code> 上安装 OpenSSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br></pre></td></tr></table></figure>\n\n<p>然后，生成 CA 证书和私钥：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/ssl</span><br><span class=\"line\">sudo mkdir CA</span><br><span class=\"line\">cd CA</span><br><span class=\"line\">sudo mkdir certs crl newcerts private</span><br><span class=\"line\">sudo chmod 700 private</span><br><span class=\"line\">sudo touch index.txt</span><br><span class=\"line\">echo 1000 &gt; serial</span><br><span class=\"line\">sudo openssl genrsa -aes256 -out private/ca.key.pem 4096</span><br><span class=\"line\">sudo chmod 400 private/ca.key.pem</span><br><span class=\"line\">sudo openssl req -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -key private/ca.key.pem \\</span><br><span class=\"line\">    -new -x509 -days 3650 -sha256 -extensions v3_ca \\</span><br><span class=\"line\">    -out certs/ca.cert.pem</span><br><span class=\"line\">sudo chmod 444 certs/ca.cert.pem</span><br></pre></td></tr></table></figure>\n\n<p>这段命令生成了一个名为 <code>ca.key.pem</code> 的私钥和一个名为 <code>ca.cert.pem</code> 的 CA 证书。私钥被加密以保护其安全性。接下来，我们需要将证书复制到其他 Linux 主机。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/CA/certs/ca.cert.pem user@linux2:/tmp/</span><br><span class=\"line\">sudo scp /etc/ssl/CA/private/ca.key.pem user@linux2:/tmp/</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>user</code> 是你在 <code>linux2</code> 主机上的用户名。</p>\n<p>然后，在 <code>linux2</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建证书签名请求。</p>\n<p>接下来，在 <code>linux2</code> 上生成一个证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的证书。</p>\n<p>最后，将 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp user@linux1:/tmp/skills.cert.pem /etc/ssl/</span><br><span class=\"line\">sudo scp user@linux1:/tmp/skills.key /etc/ssl/</span><br><span class=\"line\">sudo chmod 644 /etc/ssl/skills.cert.pem</span><br><span class=\"line\">sudo chmod 400 /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>现在，<code>linux1</code> 作为 CA 服务器可以为其他 Linux 主机颁发证书让我们继续完善 HTTPS 服务器的配置。</p>\n<p>首先，在 <code>linux1</code> 上安装 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n\n<p>然后，在 <code>linux1</code> 上创建一个名为 <code>skills.lan.cnf</code> 的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[req]</span><br><span class=\"line\">default_bits = 2048</span><br><span class=\"line\">prompt = no</span><br><span class=\"line\">default_md = sha256</span><br><span class=\"line\">distinguished_name = dn</span><br><span class=\"line\"></span><br><span class=\"line\">[dn]</span><br><span class=\"line\">C = CN</span><br><span class=\"line\">ST = Beijing</span><br><span class=\"line\">L = Beijing</span><br><span class=\"line\">O = skills</span><br><span class=\"line\">OU = system</span><br><span class=\"line\">CN = skills.lan</span><br></pre></td></tr></table></figure>\n\n<p>这个配置文件用于创建服务器证书签名请求。</p>\n<p>接下来，在 <code>linux1</code> 上生成一个服务器证书签名请求：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -new -config skills.lan.cnf -keyout skills.key -out skills.csr</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将生成一个名为 <code>skills.key</code> 的私钥和一个名为 <code>skills.csr</code> 的证书签名请求。</p>\n<p>然后，将 <code>skills.csr</code> 文件复制到 <code>linux1</code> 上，并使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 为证书签名请求签名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp skills.csr user@linux1:/tmp/</span><br><span class=\"line\">sudo ssh user@linux1 &quot;sudo openssl ca -config /etc/ssl/openssl.cnf \\</span><br><span class=\"line\">    -extensions server_cert -days 1825 -notext -md sha256 \\</span><br><span class=\"line\">    -in /tmp/skills.csr \\</span><br><span class=\"line\">    -out /tmp/skills.cert.pem \\</span><br><span class=\"line\">    -batch&quot;</span><br></pre></td></tr></table></figure>\n\n<p>这个命令使用 <code>ca.cert.pem</code> 和 <code>ca.key.pem</code> 签署了 <code>skills.csr</code>，并生成了名为 <code>skills.cert.pem</code> 的服务器证书。</p>\n<p>接下来，为 Apache2 配置 SSL：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod ssl</span><br><span class=\"line\">sudo cp /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-available/skills-ssl.conf</span><br><span class=\"line\">sudo vi /etc/apache2/sites-available/skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将复制默认的 SSL 配置文件，并将其重命名为 <code>skills-ssl.conf</code>。然后使用 vi 编辑器打开 <code>skills-ssl.conf</code> 文件，将以下内容添加到文件的末尾：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSLEngine on</span><br><span class=\"line\">SSLCertificateFile /etc/ssl/skills.cert.pem</span><br><span class=\"line\">SSLCertificateKeyFile /etc/ssl/skills.key</span><br></pre></td></tr></table></figure>\n\n<p>保存并关闭文件。</p>\n<p>接下来，启用 <code>skills-ssl.conf</code> 配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2ensite skills-ssl.conf</span><br></pre></td></tr></table></figure>\n\n<p>然后重新启动 Apache2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>现在，当用户访问 <code>https://skills.lan</code> 时，Apache2 将使用 <code>skills.cert.pem</code> 和 <code>skills.key</code> 文件提供 HTTPS 服务。并且，因为我们已经在 <code>linux1</code> 作为 CA 服务器为所有 Linux 主机颁发了证书，所以当用户访问其他 Linux 主机上的 HTTPS 站点时，不会出现证书警告信息。</p>\n<p>最后，让我们在其他 Linux 主机上测试 HTTPS 站点。</p>\n<p>首先，让我们在 <code>linux2</code> 上测试 HTTPS 站点：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux1:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux1</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 HTTPS 站点已成功配置。</p>\n<p>接下来，让我们在另一台 Linux 主机上测试 HTTPS 站点。假设该主机的 IP 地址为 <code>192.168.1.100</code>，请使用浏览器访问 <code>https://skills.lan</code>。如果您使用的是 Firefox 浏览器，可能会出现以下对话框：</p>\n<p><img src=\"https://i.imgur.com/3Edd6wh.png\" alt=\"Firefox security warning\"></p>\n<p>这是因为 Firefox 不信任我们刚刚创建的自签名证书。单击 “Advanced…”，然后单击 “Accept the Risk and Continue”，即可访问 HTTPS 站点。</p>\n<p>如果您使用的是 Chrome 浏览器，则不需要进行任何特殊操作。Chrome 将默认信任我们刚刚创建的自签名证书。</p>\n<p>至此，我们已经成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n<p>最后一步是将证书和私钥文件复制到需要证书的 Linux 服务器的 <code>/etc/ssl</code> 目录。我们已经为 <code>linux1</code> 上的 HTTPS 服务器创建了证书和私钥文件。现在，我们将这些文件复制到 <code>linux2</code> 上。</p>\n<p>假设您已经在 <code>linux1</code> 上创建了证书和私钥文件，那么请使用以下命令将它们复制到 <code>linux2</code> 上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo scp /etc/ssl/skills.crt /etc/ssl/skills.key linux2:/etc/ssl/</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将 <code>linux1</code> 上的 <code>/etc/ssl/skills.crt</code> 和 <code>/etc/ssl/skills.key</code> 文件复制到 <code>linux2</code> 上的 <code>/etc/ssl/</code> 目录中。</p>\n<p>现在，我们已经在 <code>linux2</code> 上复制了证书和私钥文件，让我们使用以下命令验证 <code>linux2</code> 上的 HTTPS 服务器是否工作正常：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install openssl</span><br><span class=\"line\">openssl s_client -connect linux2:443</span><br></pre></td></tr></table></figure>\n\n<p>这个命令将使用 OpenSSL 的 <code>s_client</code> 工具连接到 <code>linux2</code> 上的 HTTPS 站点。如果一切正常，您将看到类似于以下内容的输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONNECTED(00000003)</span><br><span class=\"line\">depth=1 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">depth=0 C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">verify return:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">   i:C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIID...&lt;省略&gt;...QT7H</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">issuer=C = CN, ST = Beijing, L = Beijing, O = skills, OU = system, CN = skills.lan</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Peer signing digest: SHA256</span><br><span class=\"line\">Peer signature type: RSA-PSS</span><br><span class=\"line\">Server Temp Key: X25519, 253 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has read 1077 bytes and written 481 bytes</span><br><span class=\"line\">Verification: OK</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">Early data was not sent</span><br><span class=\"line\">Verify return code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>如果您看到上面的输出，则表示 <code>linux2</code> 上的 HTTPS 站点已成功配置。</p>\n<p>至此，我们已经完成了所有任务，成功地创建了 DNS 服务器、NTP 服务器、SSH 服务器、HTTPS 服务器和 CA 服务器，并为所有 Linux 主机提供了冗余 DNS 正反向解析服务和证书颁发服务。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-04-22T23:21:38.224Z","updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtj0g2s0003ips6drdq204b","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"abbrlink":1003,"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"tomcat服务","date":"2023-04-21T16:07:10.000Z","_content":"\n\n\n1. 配置linux2为nginx服务器\n\na. 安装Nginx\n\n使用以下命令安装Nginx：\n\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\nb. 配置默认文档\n\n默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为\"hellonginx\"：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n找到index指令，将其修改为：\n\n```\nindex  hellonginx;\n```\n\n保存并退出文件。\n\nc. 配置HTTPS\n\n安装certbot工具来申请免费的Let's Encrypt SSL证书：\n\n```\nsudo apt-get update\nsudo apt-get install certbot python3-certbot-nginx\n```\n\n运行以下命令为Nginx服务器配置HTTPS：\n\n```\nsudo certbot --nginx -d your-domain-name\n```\n\n将your-domain-name替换为您的域名。按照命令提示完成配置。\n\nd. 配置HTTP重定向到HTTPS\n\n为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：\n\n```\nsudo vim /etc/nginx/nginx.conf\n```\n\n在http块中添加以下代码：\n\n```\nserver {\n    listen 80;\n    server_name your-domain-name;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将your-domain-name替换为您的域名。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n2. 利用nginx反向代理，实现linux3和linux4的tomcat负载均衡\n\na. 安装Tomcat\n\n在linux3和linux4上分别安装Tomcat：\n\n```\nsudo apt-get update\nsudo apt-get install tomcat9\n```\n\nb. 配置Tomcat\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n添加以下配置，启用AJP协议和负载均衡：\n\n```\n<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n<Engine name=\"Catalina\" defaultHost=\"localhost\">\n  <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\">\n    <Manager className=\"org.apache.catalina.ha.session.DeltaManager\" expireSessionsOnShutdown=\"false\" notifyListenersOnReplication=\"true\"/>\n    <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n      <Membership className=\"org.apache.catalina.tribes.membership.McastService\" address=\"228.0.0.4\" port=\"45564\" frequency=\"500\" dropTime=\"3000\"/>\n      <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\" address=\"auto\" port=\"4000\" autoBind=\"100\" selectorTimeout=\"5000\" maxThreads=\"6\"/>\n      <Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n        <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n      </Sender>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch        />\n    </Channel>\n    <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\" filter=\"\"/>\n    <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n    <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n  </Cluster>\n</Engine>\n```\n\n保存并退出文件。\n\nc. 配置Nginx\n\n打开Nginx的配置文件：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n添加以下配置，用于反向代理Tomcat服务器：\n\n```\nupstream tomcat_backend {\n    server linux3:8080 weight=5;\n    server linux4:8080 weight=5;\n}\n\nserver {\n    listen 443 ssl;\n    server_name tomcat.skills.lan;\n\n    ssl_certificate /etc/ssl/skills.jks;\n    ssl_certificate_key /etc/ssl/skills.jks;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://tomcat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n    server_name tomcat.skills.lan;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n3. 配置linux3和linux4为Tomcat服务器\n\na. 配置默认首页\n\n在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为\"tomcatA\"或\"tomcatB\"：\n\n```\nsudo mkdir /var/lib/tomcat9/webapps/ROOT\nsudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp\n```\n\n```\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>TomcatA</title>\n</head>\n<body>\n\t<h1>TomcatA</h1>\n</body>\n</html>\n```\n\n保存并退出文件。\n\n在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为\"tomcatB\"。\n\nb. 配置HTTP和HTTPS\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：\n\n```\n<Connector port=\"80\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"443\" />\n\n<Connector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n           maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n           keystoreFile=\"/etc/ssl/skills.jks\"\n           keystorePass=\"your-password\"\n           clientAuth=\"false\" sslProtocol=\"TLS\" />\n```\n\n将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。\n\n重启Tomcat服务以应用更改：\n\n```\nsudo service tomcat9 restart\n```\n\n在另一个Tomcat服务器上重复此过程。\n\n现在，您应该能够通过https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。\n\n以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！\n","source":"_posts/tomcat服务.md","raw":"---\ntitle: tomcat服务\ndate: 2023-04-22 00:07:10\ntags:\n---\n\n\n\n1. 配置linux2为nginx服务器\n\na. 安装Nginx\n\n使用以下命令安装Nginx：\n\n```\nsudo apt-get update\nsudo apt-get install nginx\n```\n\nb. 配置默认文档\n\n默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为\"hellonginx\"：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n找到index指令，将其修改为：\n\n```\nindex  hellonginx;\n```\n\n保存并退出文件。\n\nc. 配置HTTPS\n\n安装certbot工具来申请免费的Let's Encrypt SSL证书：\n\n```\nsudo apt-get update\nsudo apt-get install certbot python3-certbot-nginx\n```\n\n运行以下命令为Nginx服务器配置HTTPS：\n\n```\nsudo certbot --nginx -d your-domain-name\n```\n\n将your-domain-name替换为您的域名。按照命令提示完成配置。\n\nd. 配置HTTP重定向到HTTPS\n\n为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：\n\n```\nsudo vim /etc/nginx/nginx.conf\n```\n\n在http块中添加以下代码：\n\n```\nserver {\n    listen 80;\n    server_name your-domain-name;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将your-domain-name替换为您的域名。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n2. 利用nginx反向代理，实现linux3和linux4的tomcat负载均衡\n\na. 安装Tomcat\n\n在linux3和linux4上分别安装Tomcat：\n\n```\nsudo apt-get update\nsudo apt-get install tomcat9\n```\n\nb. 配置Tomcat\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n添加以下配置，启用AJP协议和负载均衡：\n\n```\n<Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" />\n<Engine name=\"Catalina\" defaultHost=\"localhost\">\n  <Cluster className=\"org.apache.catalina.ha.tcp.SimpleTcpCluster\">\n    <Manager className=\"org.apache.catalina.ha.session.DeltaManager\" expireSessionsOnShutdown=\"false\" notifyListenersOnReplication=\"true\"/>\n    <Channel className=\"org.apache.catalina.tribes.group.GroupChannel\">\n      <Membership className=\"org.apache.catalina.tribes.membership.McastService\" address=\"228.0.0.4\" port=\"45564\" frequency=\"500\" dropTime=\"3000\"/>\n      <Receiver className=\"org.apache.catalina.tribes.transport.nio.NioReceiver\" address=\"auto\" port=\"4000\" autoBind=\"100\" selectorTimeout=\"5000\" maxThreads=\"6\"/>\n      <Sender className=\"org.apache.catalina.tribes.transport.ReplicationTransmitter\">\n        <Transport className=\"org.apache.catalina.tribes.transport.nio.PooledParallelSender\"/>\n      </Sender>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.TcpFailureDetector\"/>\n      <Interceptor className=\"org.apache.catalina.tribes.group.interceptors.MessageDispatch        />\n    </Channel>\n    <Valve className=\"org.apache.catalina.ha.tcp.ReplicationValve\" filter=\"\"/>\n    <Valve className=\"org.apache.catalina.ha.session.JvmRouteBinderValve\"/>\n    <ClusterListener className=\"org.apache.catalina.ha.session.ClusterSessionListener\"/>\n  </Cluster>\n</Engine>\n```\n\n保存并退出文件。\n\nc. 配置Nginx\n\n打开Nginx的配置文件：\n\n```\nsudo vim /etc/nginx/sites-available/default\n```\n\n添加以下配置，用于反向代理Tomcat服务器：\n\n```\nupstream tomcat_backend {\n    server linux3:8080 weight=5;\n    server linux4:8080 weight=5;\n}\n\nserver {\n    listen 443 ssl;\n    server_name tomcat.skills.lan;\n\n    ssl_certificate /etc/ssl/skills.jks;\n    ssl_certificate_key /etc/ssl/skills.jks;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        proxy_pass http://tomcat_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n\nserver {\n    listen 80;\n    server_name tomcat.skills.lan;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。\n\n重启Nginx服务以应用更改：\n\n```\nsudo service nginx restart\n```\n\n\n3. 配置linux3和linux4为Tomcat服务器\n\na. 配置默认首页\n\n在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为\"tomcatA\"或\"tomcatB\"：\n\n```\nsudo mkdir /var/lib/tomcat9/webapps/ROOT\nsudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp\n```\n\n```\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>TomcatA</title>\n</head>\n<body>\n\t<h1>TomcatA</h1>\n</body>\n</html>\n```\n\n保存并退出文件。\n\n在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为\"tomcatB\"。\n\nb. 配置HTTP和HTTPS\n\n打开Tomcat的server.xml配置文件：\n\n```\nsudo vim /etc/tomcat9/server.xml\n```\n\n在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：\n\n```\n<Connector port=\"80\" protocol=\"HTTP/1.1\"\n           connectionTimeout=\"20000\"\n           redirectPort=\"443\" />\n\n<Connector port=\"443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n           maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n           keystoreFile=\"/etc/ssl/skills.jks\"\n           keystorePass=\"your-password\"\n           clientAuth=\"false\" sslProtocol=\"TLS\" />\n```\n\n将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。\n\n重启Tomcat服务以应用更改：\n\n```\nsudo service tomcat9 restart\n```\n\n在另一个Tomcat服务器上重复此过程。\n\n现在，您应该能够通过https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。\n\n以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！\n","slug":"tomcat服务","published":1,"updated":"2023-04-22T23:19:14.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgtj0g310004ips61xjj9se4","content":"<ol>\n<li>配置linux2为nginx服务器</li>\n</ol>\n<p>a. 安装Nginx</p>\n<p>使用以下命令安装Nginx：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置默认文档</p>\n<p>默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为”hellonginx”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>找到index指令，将其修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index  hellonginx;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置HTTPS</p>\n<p>安装certbot工具来申请免费的Let’s Encrypt SSL证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<p>运行以下命令为Nginx服务器配置HTTPS：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d your-domain-name</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。按照命令提示完成配置。</p>\n<p>d. 配置HTTP重定向到HTTPS</p>\n<p>为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>在http块中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your-domain-name;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>利用nginx反向代理，实现linux3和linux4的tomcat负载均衡</li>\n</ol>\n<p>a. 安装Tomcat</p>\n<p>在linux3和linux4上分别安装Tomcat：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install tomcat9</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置Tomcat</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，启用AJP协议和负载均衡：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\">  &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&gt;</span><br><span class=\"line\">    &lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot; expireSessionsOnShutdown=&quot;false&quot; notifyListenersOnReplication=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class=\"line\">      &lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot; address=&quot;228.0.0.4&quot; port=&quot;45564&quot; frequency=&quot;500&quot; dropTime=&quot;3000&quot;/&gt;</span><br><span class=\"line\">      &lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot; address=&quot;auto&quot; port=&quot;4000&quot; autoBind=&quot;100&quot; selectorTimeout=&quot;5000&quot; maxThreads=&quot;6&quot;/&gt;</span><br><span class=\"line\">      &lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class=\"line\">        &lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&gt;</span><br><span class=\"line\">      &lt;/Sender&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch        /&gt;</span><br><span class=\"line\">    &lt;/Channel&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot; filter=&quot;&quot;/&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&gt;</span><br><span class=\"line\">    &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&gt;</span><br><span class=\"line\">  &lt;/Cluster&gt;</span><br><span class=\"line\">&lt;/Engine&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置Nginx</p>\n<p>打开Nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，用于反向代理Tomcat服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tomcat_backend &#123;</span><br><span class=\"line\">    server linux3:8080 weight=5;</span><br><span class=\"line\">    server linux4:8080 weight=5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://tomcat_backend;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li>配置linux3和linux4为Tomcat服务器</li>\n</ol>\n<p>a. 配置默认首页</p>\n<p>在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为”tomcatA”或”tomcatB”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/lib/tomcat9/webapps/ROOT</span><br><span class=\"line\">sudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;TomcatA&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;TomcatA&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为”tomcatB”。</p>\n<p>b. 配置HTTP和HTTPS</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">           connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">           redirectPort=&quot;443&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span><br><span class=\"line\">           maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class=\"line\">           keystoreFile=&quot;/etc/ssl/skills.jks&quot;</span><br><span class=\"line\">           keystorePass=&quot;your-password&quot;</span><br><span class=\"line\">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。</p>\n<p>重启Tomcat服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service tomcat9 restart</span><br></pre></td></tr></table></figure>\n\n<p>在另一个Tomcat服务器上重复此过程。</p>\n<p>现在，您应该能够通过<a href=\"https://tomcat.skills.lan访问负载均衡tomcat集群,并在每个tomcat服务器上看到不同的默认首页内容./\">https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。</a></p>\n<p>以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！</p>\n","site":{"data":{}},"cover":false,"abbrlink":1003,"excerpt":"","more":"<ol>\n<li>配置linux2为nginx服务器</li>\n</ol>\n<p>a. 安装Nginx</p>\n<p>使用以下命令安装Nginx：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nginx</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置默认文档</p>\n<p>默认情况下，Nginx的默认文档是index.html。打开默认文档的配置文件，并将默认文档修改为”hellonginx”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>找到index指令，将其修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index  hellonginx;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置HTTPS</p>\n<p>安装certbot工具来申请免费的Let’s Encrypt SSL证书：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install certbot python3-certbot-nginx</span><br></pre></td></tr></table></figure>\n\n<p>运行以下命令为Nginx服务器配置HTTPS：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo certbot --nginx -d your-domain-name</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。按照命令提示完成配置。</p>\n<p>d. 配置HTTP重定向到HTTPS</p>\n<p>为了强制使用HTTPS，可以将所有HTTP请求重定向到HTTPS。打开Nginx配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>在http块中添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name your-domain-name;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将your-domain-name替换为您的域名。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>利用nginx反向代理，实现linux3和linux4的tomcat负载均衡</li>\n</ol>\n<p>a. 安装Tomcat</p>\n<p>在linux3和linux4上分别安装Tomcat：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install tomcat9</span><br></pre></td></tr></table></figure>\n\n<p>b. 配置Tomcat</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，启用AJP协议和负载均衡：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;</span><br><span class=\"line\">&lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot;&gt;</span><br><span class=\"line\">  &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;&gt;</span><br><span class=\"line\">    &lt;Manager className=&quot;org.apache.catalina.ha.session.DeltaManager&quot; expireSessionsOnShutdown=&quot;false&quot; notifyListenersOnReplication=&quot;true&quot;/&gt;</span><br><span class=\"line\">    &lt;Channel className=&quot;org.apache.catalina.tribes.group.GroupChannel&quot;&gt;</span><br><span class=\"line\">      &lt;Membership className=&quot;org.apache.catalina.tribes.membership.McastService&quot; address=&quot;228.0.0.4&quot; port=&quot;45564&quot; frequency=&quot;500&quot; dropTime=&quot;3000&quot;/&gt;</span><br><span class=\"line\">      &lt;Receiver className=&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot; address=&quot;auto&quot; port=&quot;4000&quot; autoBind=&quot;100&quot; selectorTimeout=&quot;5000&quot; maxThreads=&quot;6&quot;/&gt;</span><br><span class=\"line\">      &lt;Sender className=&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;&gt;</span><br><span class=\"line\">        &lt;Transport className=&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;/&gt;</span><br><span class=\"line\">      &lt;/Sender&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;/&gt;</span><br><span class=\"line\">      &lt;Interceptor className=&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatch        /&gt;</span><br><span class=\"line\">    &lt;/Channel&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot; filter=&quot;&quot;/&gt;</span><br><span class=\"line\">    &lt;Valve className=&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;/&gt;</span><br><span class=\"line\">    &lt;ClusterListener className=&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;/&gt;</span><br><span class=\"line\">  &lt;/Cluster&gt;</span><br><span class=\"line\">&lt;/Engine&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>c. 配置Nginx</p>\n<p>打开Nginx的配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置，用于反向代理Tomcat服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream tomcat_backend &#123;</span><br><span class=\"line\">    server linux3:8080 weight=5;</span><br><span class=\"line\">    server linux4:8080 weight=5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_certificate_key /etc/ssl/skills.jks;</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class=\"line\">    ssl_ciphers HIGH:!aNULL:!MD5;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://tomcat_backend;</span><br><span class=\"line\">        proxy_set_header Host $host;</span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name tomcat.skills.lan;</span><br><span class=\"line\">    return 301 https://$server_name$request_uri;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将upstream指令中的服务器地址和端口修改为您的Tomcat服务器的地址和端口。将ssl_certificate和ssl_certificate_key指令中的路径修改为您的SSL证书路径。保存并退出文件。</p>\n<p>重启Nginx服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service nginx restart</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li>配置linux3和linux4为Tomcat服务器</li>\n</ol>\n<p>a. 配置默认首页</p>\n<p>在Tomcat的webapps目录下创建ROOT文件夹，并在该文件夹中创建index.jsp文件。打开index.jsp文件，并将默认内容修改为”tomcatA”或”tomcatB”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /var/lib/tomcat9/webapps/ROOT</span><br><span class=\"line\">sudo vim /var/lib/tomcat9/webapps/ROOT/index.jsp</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;title&gt;TomcatA&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;h1&gt;TomcatA&lt;/h1&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>保存并退出文件。</p>\n<p>在另一个Tomcat服务器上重复此过程，将index.jsp文件中的内容修改为”tomcatB”。</p>\n<p>b. 配置HTTP和HTTPS</p>\n<p>打开Tomcat的server.xml配置文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/tomcat9/server.xml</span><br></pre></td></tr></table></figure>\n\n<p>在<Connector>元素中添加以下配置，启用HTTP和HTTPS连接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</span><br><span class=\"line\">           connectionTimeout=&quot;20000&quot;</span><br><span class=\"line\">           redirectPort=&quot;443&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Connector port=&quot;443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span><br><span class=\"line\">           maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class=\"line\">           keystoreFile=&quot;/etc/ssl/skills.jks&quot;</span><br><span class=\"line\">           keystorePass=&quot;your-password&quot;</span><br><span class=\"line\">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>将keystoreFile指令中的路径和keystorePass指令中的密码修改为您的SSL证书路径和密码。保存并退出文件。</p>\n<p>重启Tomcat服务以应用更改：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service tomcat9 restart</span><br></pre></td></tr></table></figure>\n\n<p>在另一个Tomcat服务器上重复此过程。</p>\n<p>现在，您应该能够通过<a href=\"https://tomcat.skills.lan访问负载均衡tomcat集群,并在每个tomcat服务器上看到不同的默认首页内容./\">https://tomcat.skills.lan访问负载均衡Tomcat集群，并在每个Tomcat服务器上看到不同的默认首页内容。</a></p>\n<p>以上就是采用Tomcat搭建动态网站的完整步骤。希望这对您有所帮助！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[],"abbrlink":[{"_id":"c-thiskeyusingbyabbrlink2","maxid":1003},{"_id":"clgtj0g0t0000ips66bd708kz","maxid":1001},{"_id":"clgtj0g1x0001ips68ju401p0","maxid":1002},{"_id":"clgtj0g2h0002ips64l0z7qld","maxid":1002},{"_id":"clgtj0g2s0003ips6drdq204b","maxid":1003},{"_id":"clgtj0g310004ips61xjj9se4","maxid":1003}]}}